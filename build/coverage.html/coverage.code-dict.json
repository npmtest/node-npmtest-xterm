{"/home/travis/build/npmtest/node-npmtest-xterm/test.js":"/* istanbul instrument in package npmtest_xterm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xterm/lib.npmtest_xterm.js":"/* istanbul instrument in package npmtest_xterm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xterm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xterm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xterm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xterm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xterm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xterm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xterm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xterm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xterm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xterm.__dirname + '/lib.npmtest_xterm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/xterm.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositionHelper_1 = require(\"./CompositionHelper\");\nvar EventEmitter_1 = require(\"./EventEmitter\");\nvar Viewport_1 = require(\"./Viewport\");\nvar Clipboard_1 = require(\"./handlers/Clipboard\");\nvar CircularList_1 = require(\"./utils/CircularList\");\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\nvar InputHandler_1 = require(\"./InputHandler\");\nvar Parser_1 = require(\"./Parser\");\nvar Renderer_1 = require(\"./Renderer\");\nvar Linkifier_1 = require(\"./Linkifier\");\nvar CharMeasure_1 = require(\"./utils/CharMeasure\");\nvar Browser = require(\"./utils/Browser\");\nvar document = (typeof window != 'undefined') ? window.document : null;\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\nvar WRITE_BATCH_SIZE = 300;\nvar CURSOR_BLINK_INTERVAL = 600;\nfunction Terminal(options) {\n    var self = this;\n    if (!(this instanceof Terminal)) {\n        return new Terminal(arguments[0], arguments[1], arguments[2]);\n    }\n    self.browser = Browser;\n    self.cancel = Terminal.cancel;\n    EventEmitter_1.EventEmitter.call(this);\n    if (typeof options === 'number') {\n        options = {\n            cols: arguments[0],\n            rows: arguments[1],\n            handler: arguments[2]\n        };\n    }\n    options = options || {};\n    Object.keys(Terminal.defaults).forEach(function (key) {\n        if (options[key] == null) {\n            options[key] = Terminal.options[key];\n            if (Terminal[key] !== Terminal.defaults[key]) {\n                options[key] = Terminal[key];\n            }\n        }\n        self[key] = options[key];\n    });\n    if (options.colors.length === 8) {\n        options.colors = options.colors.concat(Terminal._colors.slice(8));\n    }\n    else if (options.colors.length === 16) {\n        options.colors = options.colors.concat(Terminal._colors.slice(16));\n    }\n    else if (options.colors.length === 10) {\n        options.colors = options.colors.slice(0, -2).concat(Terminal._colors.slice(8, -2), options.colors.slice(-2));\n    }\n    else if (options.colors.length === 18) {\n        options.colors = options.colors.concat(Terminal._colors.slice(16, -2), options.colors.slice(-2));\n    }\n    this.colors = options.colors;\n    this.options = options;\n    this.parent = options.body || options.parent || (document ? document.getElementsByTagName('body')[0] : null);\n    this.cols = options.cols || options.geometry[0];\n    this.rows = options.rows || options.geometry[1];\n    this.geometry = [this.cols, this.rows];\n    if (options.handler) {\n        this.on('data', options.handler);\n    }\n    this.ybase = 0;\n    this.ydisp = 0;\n    this.x = 0;\n    this.y = 0;\n    this.cursorState = 0;\n    this.cursorHidden = false;\n    this.convertEol;\n    this.queue = '';\n    this.scrollTop = 0;\n    this.scrollBottom = this.rows - 1;\n    this.customKeydownHandler = null;\n    this.cursorBlinkInterval = null;\n    this.applicationKeypad = false;\n    this.applicationCursor = false;\n    this.originMode = false;\n    this.insertMode = false;\n    this.wraparoundMode = true;\n    this.normal = null;\n    this.charset = null;\n    this.gcharset = null;\n    this.glevel = 0;\n    this.charsets = [null];\n    this.decLocator;\n    this.x10Mouse;\n    this.vt200Mouse;\n    this.vt300Mouse;\n    this.normalMouse;\n    this.mouseEvents;\n    this.sendFocus;\n    this.utfMouse;\n    this.sgrMouse;\n    this.urxvtMouse;\n    this.element;\n    this.children;\n    this.refreshStart;\n    this.refreshEnd;\n    this.savedX;\n    this.savedY;\n    this.savedCols;\n    this.readable = true;\n    this.writable = true;\n    this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\n    this.curAttr = this.defAttr;\n    this.params = [];\n    this.currentParam = 0;\n    this.prefix = '';\n    this.postfix = '';\n    this.inputHandler = new InputHandler_1.InputHandler(this);\n    this.parser = new Parser_1.Parser(this.inputHandler, this);\n    this.renderer = this.renderer || null;\n    this.linkifier = this.linkifier || new Linkifier_1.Linkifier();\n    this.writeBuffer = [];\n    this.writeInProgress = false;\n    this.xoffSentToCatchUp = false;\n    this.writeStopped = false;\n    this.surrogate_high = '';\n    this.lines = new CircularList_1.CircularList(this.scrollback);\n    var i = this.rows;\n    while (i--) {\n        this.lines.push(this.blankLine());\n    }\n    this.tabs;\n    this.setupStops();\n    this.userScrolling = false;\n}\ninherits(Terminal, EventEmitter_1.EventEmitter);\nTerminal.prototype.eraseAttr = function () {\n    return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\n};\nTerminal.tangoColors = [\n    '#2e3436',\n    '#cc0000',\n    '#4e9a06',\n    '#c4a000',\n    '#3465a4',\n    '#75507b',\n    '#06989a',\n    '#d3d7cf',\n    '#555753',\n    '#ef2929',\n    '#8ae234',\n    '#fce94f',\n    '#729fcf',\n    '#ad7fa8',\n    '#34e2e2',\n    '#eeeeec'\n];\nTerminal.colors = (function () {\n    var colors = Terminal.tangoColors.slice(), r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff], i;\n    i = 0;\n    for (; i < 216; i++) {\n        out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);\n    }\n    i = 0;\n    for (; i < 24; i++) {\n        r = 8 + i * 10;\n        out(r, r, r);\n    }\n    function out(r, g, b) {\n        colors.push('#' + hex(r) + hex(g) + hex(b));\n    }\n    function hex(c) {\n        c = c.toString(16);\n        return c.length < 2 ? '0' + c : c;\n    }\n    return colors;\n})();\nTerminal._colors = Terminal.colors.slice();\nTerminal.vcolors = (function () {\n    var out = [], colors = Terminal.colors, i = 0, color;\n    for (; i < 256; i++) {\n        color = parseInt(colors[i].substring(1), 16);\n        out.push([\n            (color >> 16) & 0xff,\n            (color >> 8) & 0xff,\n            color & 0xff\n        ]);\n    }\n    return out;\n})();\nTerminal.defaults = {\n    colors: Terminal.colors,\n    theme: 'default',\n    convertEol: false,\n    termName: 'xterm',\n    geometry: [80, 24],\n    cursorBlink: false,\n    cursorStyle: 'block',\n    visualBell: false,\n    popOnBell: false,\n    scrollback: 1000,\n    screenKeys: false,\n    debug: false,\n    cancelEvents: false,\n    disableStdin: false,\n    useFlowControl: false,\n    tabStopWidth: 8\n};\nTerminal.options = {};\nTerminal.focus = null;\neach(keys(Terminal.defaults), function (key) {\n    Terminal[key] = Terminal.defaults[key];\n    Terminal.options[key] = Terminal.defaults[key];\n});\nTerminal.prototype.focus = function () {\n    return this.textarea.focus();\n};\nTerminal.prototype.getOption = function (key, value) {\n    if (!(key in Terminal.defaults)) {\n        throw new Error('No option with key \"' + key + '\"');\n    }\n    if (typeof this.options[key] !== 'undefined') {\n        return this.options[key];\n    }\n    return this[key];\n};\nTerminal.prototype.setOption = function (key, value) {\n    if (!(key in Terminal.defaults)) {\n        throw new Error('No option with key \"' + key + '\"');\n    }\n    switch (key) {\n        case 'scrollback':\n            if (this.options[key] !== value) {\n                if (this.lines.length > value) {\n                    var amountToTrim = this.lines.length - value;\n                    var needsRefresh = (this.ydisp - amountToTrim < 0);\n                    this.lines.trimStart(amountToTrim);\n                    this.ybase = Math.max(this.ybase - amountToTrim, 0);\n                    this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n                    if (needsRefresh) {\n                        this.refresh(0, this.rows - 1);\n                    }\n                }\n                this.lines.maxLength = value;\n                this.viewport.syncScrollArea();\n            }\n            break;\n    }\n    this[key] = value;\n    this.options[key] = value;\n    switch (key) {\n        case 'cursorBlink':\n            this.setCursorBlinking(value);\n            break;\n        case 'cursorStyle':\n            this.element.classList.toggle(\"xterm-cursor-style-underline\", value === 'underline');\n            this.element.classList.toggle(\"xterm-cursor-style-bar\", value === 'bar');\n            break;\n        case 'tabStopWidth':\n            this.setupStops();\n            break;\n    }\n};\nTerminal.prototype.restartCursorBlinking = function () {\n    this.setCursorBlinking(this.options.cursorBlink);\n};\nTerminal.prototype.setCursorBlinking = function (enabled) {\n    this.element.classList.toggle('xterm-cursor-blink', enabled);\n    this.clearCursorBlinkingInterval();\n    if (enabled) {\n        var self = this;\n        this.cursorBlinkInterval = setInterval(function () {\n            self.element.classList.toggle('xterm-cursor-blink-on');\n        }, CURSOR_BLINK_INTERVAL);\n    }\n};\nTerminal.prototype.clearCursorBlinkingInterval = function () {\n    this.element.classList.remove('xterm-cursor-blink-on');\n    if (this.cursorBlinkInterval) {\n        clearInterval(this.cursorBlinkInterval);\n        this.cursorBlinkInterval = null;\n    }\n};\nTerminal.bindFocus = function (term) {\n    on(term.textarea, 'focus', function (ev) {\n        if (term.sendFocus) {\n            term.send(EscapeSequences_1.C0.ESC + '[I');\n        }\n        term.element.classList.add('focus');\n        term.showCursor();\n        term.restartCursorBlinking.apply(term);\n        Terminal.focus = term;\n        term.emit('focus', { terminal: term });\n    });\n};\nTerminal.prototype.blur = function () {\n    return this.textarea.blur();\n};\nTerminal.bindBlur = function (term) {\n    on(term.textarea, 'blur', function (ev) {\n        term.refresh(term.y, term.y);\n        if (term.sendFocus) {\n            term.send(EscapeSequences_1.C0.ESC + '[O');\n        }\n        term.element.classList.remove('focus');\n        term.clearCursorBlinkingInterval.apply(term);\n        Terminal.focus = null;\n        term.emit('blur', { terminal: term });\n    });\n};\nTerminal.prototype.initGlobal = function () {\n    var term = this;\n    Terminal.bindKeys(this);\n    Terminal.bindFocus(this);\n    Terminal.bindBlur(this);\n    on(this.element, 'copy', function (ev) {\n        Clipboard_1.copyHandler.call(this, ev, term);\n    });\n    on(this.textarea, 'paste', function (ev) {\n        Clipboard_1.pasteHandler.call(this, ev, term);\n    });\n    on(this.element, 'paste', function (ev) {\n        Clipboard_1.pasteHandler.call(this, ev, term);\n    });\n    function rightClickHandlerWrapper(ev) {\n        Clipboard_1.rightClickHandler.call(this, ev, term);\n    }\n    if (term.browser.isFirefox) {\n        on(this.element, 'mousedown', function (ev) {\n            if (ev.button == 2) {\n                rightClickHandlerWrapper(ev);\n            }\n        });\n    }\n    else {\n        on(this.element, 'contextmenu', rightClickHandlerWrapper);\n    }\n};\nTerminal.bindKeys = function (term) {\n    on(term.element, 'keydown', function (ev) {\n        if (document.activeElement != this) {\n            return;\n        }\n        term.keyDown(ev);\n    }, true);\n    on(term.element, 'keypress', function (ev) {\n        if (document.activeElement != this) {\n            return;\n        }\n        term.keyPress(ev);\n    }, true);\n    on(term.element, 'keyup', function (ev) {\n        if (!wasMondifierKeyOnlyEvent(ev)) {\n            term.focus(term);\n        }\n    }, true);\n    on(term.textarea, 'keydown', function (ev) {\n        term.keyDown(ev);\n    }, true);\n    on(term.textarea, 'keypress', function (ev) {\n        term.keyPress(ev);\n        this.value = '';\n    }, true);\n    on(term.textarea, 'compositionstart', term.compositionHelper.compositionstart.bind(term.compositionHelper));\n    on(term.textarea, 'compositionupdate', term.compositionHelper.compositionupdate.bind(term.compositionHelper));\n    on(term.textarea, 'compositionend', term.compositionHelper.compositionend.bind(term.compositionHelper));\n    term.on('refresh', term.compositionHelper.updateCompositionElements.bind(term.compositionHelper));\n    term.on('refresh', function (data) {\n        term.queueLinkification(data.start, data.end);\n    });\n};\nTerminal.prototype.insertRow = function (row) {\n    if (typeof row != 'object') {\n        row = document.createElement('div');\n    }\n    this.rowContainer.appendChild(row);\n    this.children.push(row);\n    return row;\n};\nTerminal.prototype.open = function (parent) {\n    var self = this, i = 0, div;\n    this.parent = parent || this.parent;\n    if (!this.parent) {\n        throw new Error('Terminal requires a parent element.');\n    }\n    this.context = this.parent.ownerDocument.defaultView;\n    this.document = this.parent.ownerDocument;\n    this.body = this.document.getElementsByTagName('body')[0];\n    this.element = this.document.createElement('div');\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.classList.add('xterm-theme-' + this.theme);\n    this.setCursorBlinking(this.options.cursorBlink);\n    this.element.style.height;\n    this.element.setAttribute('tabindex', 0);\n    this.viewportElement = document.createElement('div');\n    this.viewportElement.classList.add('xterm-viewport');\n    this.element.appendChild(this.viewportElement);\n    this.viewportScrollArea = document.createElement('div');\n    this.viewportScrollArea.classList.add('xterm-scroll-area');\n    this.viewportElement.appendChild(this.viewportScrollArea);\n    this.rowContainer = document.createElement('div');\n    this.rowContainer.classList.add('xterm-rows');\n    this.element.appendChild(this.rowContainer);\n    this.children = [];\n    this.linkifier.attachToDom(document, this.children);\n    this.helperContainer = document.createElement('div');\n    this.helperContainer.classList.add('xterm-helpers');\n    this.element.appendChild(this.helperContainer);\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n    this.textarea.addEventListener('focus', function () {\n        self.emit('focus', { terminal: self });\n    });\n    this.textarea.addEventListener('blur', function () {\n        self.emit('blur', { terminal: self });\n    });\n    this.helperContainer.appendChild(this.textarea);\n    this.compositionView = document.createElement('div');\n    this.compositionView.classList.add('composition-view');\n    this.compositionHelper = new CompositionHelper_1.CompositionHelper(this.textarea, this.compositionView, this);\n    this.helperContainer.appendChild(this.compositionView);\n    this.charSizeStyleElement = document.createElement('style');\n    this.helperContainer.appendChild(this.charSizeStyleElement);\n    for (; i < this.rows; i++) {\n        this.insertRow();\n    }\n    this.parent.appendChild(this.element);\n    this.charMeasure = new CharMeasure_1.CharMeasure(document, this.helperContainer);\n    this.charMeasure.on('charsizechanged', function () {\n        self.updateCharSizeCSS();\n    });\n    this.charMeasure.measure();\n    this.viewport = new Viewport_1.Viewport(this, this.viewportElement, this.viewportScrollArea, this.charMeasure);\n    this.renderer = new Renderer_1.Renderer(this);\n    this.refresh(0, this.rows - 1);\n    this.initGlobal();\n    this.focus();\n    on(this.element, 'click', function () {\n        var selection = document.getSelection(), collapsed = selection.isCollapsed, isRange = typeof collapsed == 'boolean' ? !collapsed : selection.type == 'Range';\n        if (!isRange) {\n            self.focus();\n        }\n    });\n    this.bindMouse();\n    this.emit('open');\n};\nTerminal.loadAddon = function (addon, callback) {\n    if (typeof exports === 'object' && typeof module === 'object') {\n        return require('./addons/' + addon + '/' + addon);\n    }\n    else if (typeof define == 'function') {\n        return require(['./addons/' + addon + '/' + addon], callback);\n    }\n    else {\n        console.error('Cannot load a module without a CommonJS or RequireJS environment.');\n        return false;\n    }\n};\nTerminal.prototype.updateCharSizeCSS = function () {\n    this.charSizeStyleElement.textContent = '.xterm-wide-char{width:' + (this.charMeasure.width * 2) + 'px;}';\n};\nTerminal.prototype.bindMouse = function () {\n    var el = this.element, self = this, pressed = 32;\n    function sendButton(ev) {\n        var button, pos;\n        button = getButton(ev);\n        pos = getCoords(ev);\n        if (!pos)\n            return;\n        sendEvent(button, pos);\n        switch (ev.overrideType || ev.type) {\n            case 'mousedown':\n                pressed = button;\n                break;\n            case 'mouseup':\n                pressed = 32;\n                break;\n            case 'wheel':\n                break;\n        }\n    }\n    function sendMove(ev) {\n        var button = pressed, pos;\n        pos = getCoords(ev);\n        if (!pos)\n            return;\n        button += 32;\n        sendEvent(button, pos);\n    }\n    function encode(data, ch) {\n        if (!self.utfMouse) {\n            if (ch === 255)\n                return data.push(0);\n            if (ch > 127)\n                ch = 127;\n            data.push(ch);\n        }\n        else {\n            if (ch === 2047)\n                return data.push(0);\n            if (ch < 127) {\n                data.push(ch);\n            }\n            else {\n                if (ch > 2047)\n                    ch = 2047;\n                data.push(0xC0 | (ch >> 6));\n                data.push(0x80 | (ch & 0x3F));\n            }\n        }\n    }\n    function sendEvent(button, pos) {\n        if (self.vt300Mouse) {\n            button &= 3;\n            pos.x -= 32;\n            pos.y -= 32;\n            var data = EscapeSequences_1.C0.ESC + '[24';\n            if (button === 0)\n                data += '1';\n            else if (button === 1)\n                data += '3';\n            else if (button === 2)\n                data += '5';\n            else if (button === 3)\n                return;\n            else\n                data += '0';\n            data += '~[' + pos.x + ',' + pos.y + ']\\r';\n            self.send(data);\n            return;\n        }\n        if (self.decLocator) {\n            button &= 3;\n            pos.x -= 32;\n            pos.y -= 32;\n            if (button === 0)\n                button = 2;\n            else if (button === 1)\n                button = 4;\n            else if (button === 2)\n                button = 6;\n            else if (button === 3)\n                button = 3;\n            self.send(EscapeSequences_1.C0.ESC + '['\n                + button\n                + ';'\n                + (button === 3 ? 4 : 0)\n                + ';'\n                + pos.y\n                + ';'\n                + pos.x\n                + ';'\n                + (pos.page || 0)\n                + '&w');\n            return;\n        }\n        if (self.urxvtMouse) {\n            pos.x -= 32;\n            pos.y -= 32;\n            pos.x++;\n            pos.y++;\n            self.send(EscapeSequences_1.C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\n            return;\n        }\n        if (self.sgrMouse) {\n            pos.x -= 32;\n            pos.y -= 32;\n            self.send(EscapeSequences_1.C0.ESC + '[<'\n                + (((button & 3) === 3 ? button & ~3 : button) - 32)\n                + ';'\n                + pos.x\n                + ';'\n                + pos.y\n                + ((button & 3) === 3 ? 'm' : 'M'));\n            return;\n        }\n        var data = [];\n        encode(data, button);\n        encode(data, pos.x);\n        encode(data, pos.y);\n        self.send(EscapeSequences_1.C0.ESC + '[M' + String.fromCharCode.apply(String, data));\n    }\n    function getButton(ev) {\n        var button, shift, meta, ctrl, mod;\n        switch (ev.overrideType || ev.type) {\n            case 'mousedown':\n                button = ev.button != null\n                    ? +ev.button\n                    : ev.which != null\n                        ? ev.which - 1\n                        : null;\n                if (self.browser.isMSIE) {\n                    button = button === 1 ? 0 : button === 4 ? 1 : button;\n                }\n                break;\n            case 'mouseup':\n                button = 3;\n                break;\n            case 'DOMMouseScroll':\n                button = ev.detail < 0\n                    ? 64\n                    : 65;\n                break;\n            case 'wheel':\n                button = ev.wheelDeltaY > 0\n                    ? 64\n                    : 65;\n                break;\n        }\n        shift = ev.shiftKey ? 4 : 0;\n        meta = ev.metaKey ? 8 : 0;\n        ctrl = ev.ctrlKey ? 16 : 0;\n        mod = shift | meta | ctrl;\n        if (self.vt200Mouse) {\n            mod &= ctrl;\n        }\n        else if (!self.normalMouse) {\n            mod = 0;\n        }\n        button = (32 + (mod << 2)) + button;\n        return button;\n    }\n    function getCoords(ev) {\n        var x, y, w, h, el;\n        if (ev.pageX == null)\n            return;\n        x = ev.pageX;\n        y = ev.pageY;\n        el = self.element;\n        while (el && el !== self.document.documentElement) {\n            x -= el.offsetLeft;\n            y -= el.offsetTop;\n            el = 'offsetParent' in el\n                ? el.offsetParent\n                : el.parentNode;\n        }\n        x = Math.ceil(x / self.charMeasure.width);\n        y = Math.ceil(y / self.charMeasure.height);\n        if (x < 0)\n            x = 0;\n        if (x > self.cols)\n            x = self.cols;\n        if (y < 0)\n            y = 0;\n        if (y > self.rows)\n            y = self.rows;\n        x += 32;\n        y += 32;\n        return {\n            x: x,\n            y: y,\n            type: 'wheel'\n        };\n    }\n    on(el, 'mousedown', function (ev) {\n        if (!self.mouseEvents)\n            return;\n        sendButton(ev);\n        self.focus();\n        if (self.vt200Mouse) {\n            ev.overrideType = 'mouseup';\n            sendButton(ev);\n            return self.cancel(ev);\n        }\n        if (self.normalMouse)\n            on(self.document, 'mousemove', sendMove);\n        if (!self.x10Mouse) {\n            on(self.document, 'mouseup', function up(ev) {\n                sendButton(ev);\n                if (self.normalMouse)\n                    off(self.document, 'mousemove', sendMove);\n                off(self.document, 'mouseup', up);\n                return self.cancel(ev);\n            });\n        }\n        return self.cancel(ev);\n    });\n    on(el, 'wheel', function (ev) {\n        if (!self.mouseEvents)\n            return;\n        if (self.x10Mouse\n            || self.vt300Mouse\n            || self.decLocator)\n            return;\n        sendButton(ev);\n        return self.cancel(ev);\n    });\n    on(el, 'wheel', function (ev) {\n        if (self.mouseEvents)\n            return;\n        self.viewport.onWheel(ev);\n        return self.cancel(ev);\n    });\n};\nTerminal.prototype.destroy = function () {\n    this.readable = false;\n    this.writable = false;\n    this._events = {};\n    this.handler = function () { };\n    this.write = function () { };\n    if (this.element && this.element.parentNode) {\n        this.element.parentNode.removeChild(this.element);\n    }\n};\nTerminal.prototype.refresh = function (start, end) {\n    if (this.renderer) {\n        this.renderer.queueRefresh(start, end);\n    }\n};\nTerminal.prototype.queueLinkification = function (start, end) {\n    if (this.linkifier) {\n        for (var i = start; i <= end; i++) {\n            this.linkifier.linkifyRow(i);\n        }\n    }\n};\nTerminal.prototype.showCursor = function () {\n    if (!this.cursorState) {\n        this.cursorState = 1;\n        this.refresh(this.y, this.y);\n    }\n};\nTerminal.prototype.scroll = function () {\n    var row;\n    if (this.lines.length === this.lines.maxLength) {\n        this.lines.trimStart(1);\n        this.ybase--;\n        if (this.ydisp !== 0) {\n            this.ydisp--;\n        }\n    }\n    this.ybase++;\n    if (!this.userScrolling) {\n        this.ydisp = this.ybase;\n    }\n    row = this.ybase + this.rows - 1;\n    row -= this.rows - 1 - this.scrollBottom;\n    if (row === this.lines.length) {\n        this.lines.push(this.blankLine());\n    }\n    else {\n        this.lines.splice(row, 0, this.blankLine());\n    }\n    if (this.scrollTop !== 0) {\n        if (this.ybase !== 0) {\n            this.ybase--;\n            if (!this.userScrolling) {\n                this.ydisp = this.ybase;\n            }\n        }\n        this.lines.splice(this.ybase + this.scrollTop, 1);\n    }\n    this.updateRange(this.scrollTop);\n    this.updateRange(this.scrollBottom);\n    this.emit('scroll', this.ydisp);\n};\nTerminal.prototype.scrollDisp = function (disp, suppressScrollEvent) {\n    if (disp < 0) {\n        this.userScrolling = true;\n    }\n    else if (disp + this.ydisp >= this.ybase) {\n        this.userScrolling = false;\n    }\n    this.ydisp += disp;\n    if (this.ydisp > this.ybase) {\n        this.ydisp = this.ybase;\n    }\n    else if (this.ydisp < 0) {\n        this.ydisp = 0;\n    }\n    if (!suppressScrollEvent) {\n        this.emit('scroll', this.ydisp);\n    }\n    this.refresh(0, this.rows - 1);\n};\nTerminal.prototype.scrollPages = function (pageCount) {\n    this.scrollDisp(pageCount * (this.rows - 1));\n};\nTerminal.prototype.scrollToTop = function () {\n    this.scrollDisp(-this.ydisp);\n};\nTerminal.prototype.scrollToBottom = function () {\n    this.scrollDisp(this.ybase - this.ydisp);\n};\nTerminal.prototype.write = function (data) {\n    this.writeBuffer.push(data);\n    if (this.options.useFlowControl && !this.xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n        this.send(EscapeSequences_1.C0.DC3);\n        this.xoffSentToCatchUp = true;\n    }\n    if (!this.writeInProgress && this.writeBuffer.length > 0) {\n        this.writeInProgress = true;\n        var self = this;\n        setTimeout(function () {\n            self.innerWrite();\n        });\n    }\n};\nTerminal.prototype.innerWrite = function () {\n    var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\n    while (writeBatch.length > 0) {\n        var data = writeBatch.shift();\n        var l = data.length, i = 0, j, cs, ch, code, low, ch_width, row;\n        if (this.xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\n            this.send(EscapeSequences_1.C0.DC1);\n            this.xoffSentToCatchUp = false;\n        }\n        this.refreshStart = this.y;\n        this.refreshEnd = this.y;\n        this.parser.parse(data);\n        this.updateRange(this.y);\n        this.refresh(this.refreshStart, this.refreshEnd);\n    }\n    if (this.writeBuffer.length > 0) {\n        var self = this;\n        setTimeout(function () {\n            self.innerWrite();\n        }, 0);\n    }\n    else {\n        this.writeInProgress = false;\n    }\n};\nTerminal.prototype.writeln = function (data) {\n    this.write(data + '\\r\\n');\n};\nTerminal.prototype.attachCustomKeydownHandler = function (customKeydownHandler) {\n    this.customKeydownHandler = customKeydownHandler;\n};\nTerminal.prototype.setHypertextLinkHandler = function (handler) {\n    if (!this.linkifier) {\n        throw new Error('Cannot attach a hypertext link handler before Terminal.open is called');\n    }\n    this.linkifier.setHypertextLinkHandler(handler);\n    this.refresh(0, this.rows - 1);\n};\nTerminal.prototype.setHypertextValidationCallback = function (handler) {\n    if (!this.linkifier) {\n        throw new Error('Cannot attach a hypertext validation callback before Terminal.open is called');\n    }\n    this.linkifier.setHypertextValidationCallback(handler);\n    this.refresh(0, this.rows - 1);\n};\nTerminal.prototype.registerLinkMatcher = function (regex, handler, options) {\n    if (this.linkifier) {\n        var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n        this.refresh(0, this.rows - 1);\n        return matcherId;\n    }\n};\nTerminal.prototype.deregisterLinkMatcher = function (matcherId) {\n    if (this.linkifier) {\n        if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n            this.refresh(0, this.rows - 1);\n        }\n    }\n};\nTerminal.prototype.keyDown = function (ev) {\n    if (this.customKeydownHandler && this.customKeydownHandler(ev) === false) {\n        return false;\n    }\n    this.restartCursorBlinking();\n    if (!this.compositionHelper.keydown.bind(this.compositionHelper)(ev)) {\n        if (this.ybase !== this.ydisp) {\n            this.scrollToBottom();\n        }\n        return false;\n    }\n    var self = this;\n    var result = this.evaluateKeyEscapeSequence(ev);\n    if (result.key === EscapeSequences_1.C0.DC3) {\n        this.writeStopped = true;\n    }\n    else if (result.key === EscapeSequences_1.C0.DC1) {\n        this.writeStopped = false;\n    }\n    if (result.scrollDisp) {\n        this.scrollDisp(result.scrollDisp);\n        return this.cancel(ev, true);\n    }\n    if (isThirdLevelShift(this, ev)) {\n        return true;\n    }\n    if (result.cancel) {\n        this.cancel(ev, true);\n    }\n    if (!result.key) {\n        return true;\n    }\n    this.emit('keydown', ev);\n    this.emit('key', result.key, ev);\n    this.showCursor();\n    this.handler(result.key);\n    return this.cancel(ev, true);\n};\nTerminal.prototype.evaluateKeyEscapeSequence = function (ev) {\n    var result = {\n        cancel: false,\n        key: undefined,\n        scrollDisp: undefined\n    };\n    var modifiers = ev.shiftKey << 0 | ev.altKey << 1 | ev.ctrlKey << 2 | ev.metaKey << 3;\n    switch (ev.keyCode) {\n        case 8:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.BS;\n                break;\n            }\n            result.key = EscapeSequences_1.C0.DEL;\n            break;\n        case 9:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[Z';\n                break;\n            }\n            result.key = EscapeSequences_1.C0.HT;\n            result.cancel = true;\n            break;\n        case 13:\n            result.key = EscapeSequences_1.C0.CR;\n            result.cancel = true;\n            break;\n        case 27:\n            result.key = EscapeSequences_1.C0.ESC;\n            result.cancel = true;\n            break;\n        case 37:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'D';\n                if (result.key == EscapeSequences_1.C0.ESC + '[1;3D') {\n                    result.key = (this.browser.isMac) ? EscapeSequences_1.C0.ESC + 'b' : EscapeSequences_1.C0.ESC + '[1;5D';\n                }\n            }\n            else if (this.applicationCursor) {\n                result.key = EscapeSequences_1.C0.ESC + 'OD';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[D';\n            }\n            break;\n        case 39:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'C';\n                if (result.key == EscapeSequences_1.C0.ESC + '[1;3C') {\n                    result.key = (this.browser.isMac) ? EscapeSequences_1.C0.ESC + 'f' : EscapeSequences_1.C0.ESC + '[1;5C';\n                }\n            }\n            else if (this.applicationCursor) {\n                result.key = EscapeSequences_1.C0.ESC + 'OC';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[C';\n            }\n            break;\n        case 38:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'A';\n                if (result.key == EscapeSequences_1.C0.ESC + '[1;3A') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5A';\n                }\n            }\n            else if (this.applicationCursor) {\n                result.key = EscapeSequences_1.C0.ESC + 'OA';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[A';\n            }\n            break;\n        case 40:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'B';\n                if (result.key == EscapeSequences_1.C0.ESC + '[1;3B') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5B';\n                }\n            }\n            else if (this.applicationCursor) {\n                result.key = EscapeSequences_1.C0.ESC + 'OB';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[B';\n            }\n            break;\n        case 45:\n            if (!ev.shiftKey && !ev.ctrlKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[2~';\n            }\n            break;\n        case 46:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[3;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[3~';\n            }\n            break;\n        case 36:\n            if (modifiers)\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'H';\n            else if (this.applicationCursor)\n                result.key = EscapeSequences_1.C0.ESC + 'OH';\n            else\n                result.key = EscapeSequences_1.C0.ESC + '[H';\n            break;\n        case 35:\n            if (modifiers)\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'F';\n            else if (this.applicationCursor)\n                result.key = EscapeSequences_1.C0.ESC + 'OF';\n            else\n                result.key = EscapeSequences_1.C0.ESC + '[F';\n            break;\n        case 33:\n            if (ev.shiftKey) {\n                result.scrollDisp = -(this.rows - 1);\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[5~';\n            }\n            break;\n        case 34:\n            if (ev.shiftKey) {\n                result.scrollDisp = this.rows - 1;\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[6~';\n            }\n            break;\n        case 112:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'P';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OP';\n            }\n            break;\n        case 113:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OQ';\n            }\n            break;\n        case 114:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'R';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OR';\n            }\n            break;\n        case 115:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'S';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OS';\n            }\n            break;\n        case 116:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[15;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[15~';\n            }\n            break;\n        case 117:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[17;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[17~';\n            }\n            break;\n        case 118:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[18;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[18~';\n            }\n            break;\n        case 119:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[19;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[19~';\n            }\n            break;\n        case 120:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[20;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[20~';\n            }\n            break;\n        case 121:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[21;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[21~';\n            }\n            break;\n        case 122:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[23;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[23~';\n            }\n            break;\n        case 123:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[24;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[24~';\n            }\n            break;\n        default:\n            if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n                if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    result.key = String.fromCharCode(ev.keyCode - 64);\n                }\n                else if (ev.keyCode === 32) {\n                    result.key = String.fromCharCode(0);\n                }\n                else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n                    result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n                }\n                else if (ev.keyCode === 56) {\n                    result.key = String.fromCharCode(127);\n                }\n                else if (ev.keyCode === 219) {\n                    result.key = String.fromCharCode(27);\n                }\n                else if (ev.keyCode === 220) {\n                    result.key = String.fromCharCode(28);\n                }\n                else if (ev.keyCode === 221) {\n                    result.key = String.fromCharCode(29);\n                }\n            }\n            else if (!this.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) {\n                if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    result.key = EscapeSequences_1.C0.ESC + String.fromCharCode(ev.keyCode + 32);\n                }\n                else if (ev.keyCode === 192) {\n                    result.key = EscapeSequences_1.C0.ESC + '`';\n                }\n                else if (ev.keyCode >= 48 && ev.keyCode <= 57) {\n                    result.key = EscapeSequences_1.C0.ESC + (ev.keyCode - 48);\n                }\n            }\n            break;\n    }\n    return result;\n};\nTerminal.prototype.setgLevel = function (g) {\n    this.glevel = g;\n    this.charset = this.charsets[g];\n};\nTerminal.prototype.setgCharset = function (g, charset) {\n    this.charsets[g] = charset;\n    if (this.glevel === g) {\n        this.charset = charset;\n    }\n};\nTerminal.prototype.keyPress = function (ev) {\n    var key;\n    this.cancel(ev);\n    if (ev.charCode) {\n        key = ev.charCode;\n    }\n    else if (ev.which == null) {\n        key = ev.keyCode;\n    }\n    else if (ev.which !== 0 && ev.charCode !== 0) {\n        key = ev.which;\n    }\n    else {\n        return false;\n    }\n    if (!key || ((ev.altKey || ev.ctrlKey || ev.metaKey) && !isThirdLevelShift(this, ev))) {\n        return false;\n    }\n    key = String.fromCharCode(key);\n    this.emit('keypress', key, ev);\n    this.emit('key', key, ev);\n    this.showCursor();\n    this.handler(key);\n    return false;\n};\nTerminal.prototype.send = function (data) {\n    var self = this;\n    if (!this.queue) {\n        setTimeout(function () {\n            self.handler(self.queue);\n            self.queue = '';\n        }, 1);\n    }\n    this.queue += data;\n};\nTerminal.prototype.bell = function () {\n    if (!this.visualBell)\n        return;\n    var self = this;\n    this.element.style.borderColor = 'white';\n    setTimeout(function () {\n        self.element.style.borderColor = '';\n    }, 10);\n    if (this.popOnBell)\n        this.focus();\n};\nTerminal.prototype.log = function () {\n    if (!this.debug)\n        return;\n    if (!this.context.console || !this.context.console.log)\n        return;\n    var args = Array.prototype.slice.call(arguments);\n    this.context.console.log.apply(this.context.console, args);\n};\nTerminal.prototype.error = function () {\n    if (!this.debug)\n        return;\n    if (!this.context.console || !this.context.console.error)\n        return;\n    var args = Array.prototype.slice.call(arguments);\n    this.context.console.error.apply(this.context.console, args);\n};\nTerminal.prototype.resize = function (x, y) {\n    if (isNaN(x) || isNaN(y)) {\n        return;\n    }\n    var line, el, i, j, ch, addToY;\n    if (x === this.cols && y === this.rows) {\n        return;\n    }\n    if (x < 1)\n        x = 1;\n    if (y < 1)\n        y = 1;\n    j = this.cols;\n    if (j < x) {\n        ch = [this.defAttr, ' ', 1];\n        i = this.lines.length;\n        while (i--) {\n            while (this.lines.get(i).length < x) {\n                this.lines.get(i).push(ch);\n            }\n        }\n    }\n    this.cols = x;\n    this.setupStops(this.cols);\n    j = this.rows;\n    addToY = 0;\n    if (j < y) {\n        el = this.element;\n        while (j++ < y) {\n            if (this.lines.length < y + this.ybase) {\n                if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                    this.ybase--;\n                    addToY++;\n                    if (this.ydisp > 0) {\n                        this.ydisp--;\n                    }\n                }\n                else {\n                    this.lines.push(this.blankLine());\n                }\n            }\n            if (this.children.length < y) {\n                this.insertRow();\n            }\n        }\n    }\n    else {\n        while (j-- > y) {\n            if (this.lines.length > y + this.ybase) {\n                if (this.lines.length > this.ybase + this.y + 1) {\n                    this.lines.pop();\n                }\n                else {\n                    this.ybase++;\n                    this.ydisp++;\n                }\n            }\n            if (this.children.length > y) {\n                el = this.children.shift();\n                if (!el)\n                    continue;\n                el.parentNode.removeChild(el);\n            }\n        }\n    }\n    this.rows = y;\n    if (this.y >= y) {\n        this.y = y - 1;\n    }\n    if (addToY) {\n        this.y += addToY;\n    }\n    if (this.x >= x) {\n        this.x = x - 1;\n    }\n    this.scrollTop = 0;\n    this.scrollBottom = y - 1;\n    this.charMeasure.measure();\n    this.refresh(0, this.rows - 1);\n    this.normal = null;\n    this.geometry = [this.cols, this.rows];\n    this.emit('resize', { terminal: this, cols: x, rows: y });\n};\nTerminal.prototype.updateRange = function (y) {\n    if (y < this.refreshStart)\n        this.refreshStart = y;\n    if (y > this.refreshEnd)\n        this.refreshEnd = y;\n};\nTerminal.prototype.maxRange = function () {\n    this.refreshStart = 0;\n    this.refreshEnd = this.rows - 1;\n};\nTerminal.prototype.setupStops = function (i) {\n    if (i != null) {\n        if (!this.tabs[i]) {\n            i = this.prevStop(i);\n        }\n    }\n    else {\n        this.tabs = {};\n        i = 0;\n    }\n    for (; i < this.cols; i += this.getOption('tabStopWidth')) {\n        this.tabs[i] = true;\n    }\n};\nTerminal.prototype.prevStop = function (x) {\n    if (x == null)\n        x = this.x;\n    while (!this.tabs[--x] && x > 0)\n        ;\n    return x >= this.cols\n        ? this.cols - 1\n        : x < 0 ? 0 : x;\n};\nTerminal.prototype.nextStop = function (x) {\n    if (x == null)\n        x = this.x;\n    while (!this.tabs[++x] && x < this.cols)\n        ;\n    return x >= this.cols\n        ? this.cols - 1\n        : x < 0 ? 0 : x;\n};\nTerminal.prototype.eraseRight = function (x, y) {\n    var line = this.lines.get(this.ybase + y);\n    if (!line) {\n        return;\n    }\n    var ch = [this.eraseAttr(), ' ', 1];\n    for (; x < this.cols; x++) {\n        line[x] = ch;\n    }\n    this.updateRange(y);\n};\nTerminal.prototype.eraseLeft = function (x, y) {\n    var line = this.lines.get(this.ybase + y);\n    if (!line) {\n        return;\n    }\n    var ch = [this.eraseAttr(), ' ', 1];\n    x++;\n    while (x--) {\n        line[x] = ch;\n    }\n    this.updateRange(y);\n};\nTerminal.prototype.clear = function () {\n    if (this.ybase === 0 && this.y === 0) {\n        return;\n    }\n    this.lines.set(0, this.lines.get(this.ybase + this.y));\n    this.lines.length = 1;\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    for (var i = 1; i < this.rows; i++) {\n        this.lines.push(this.blankLine());\n    }\n    this.refresh(0, this.rows - 1);\n    this.emit('scroll', this.ydisp);\n};\nTerminal.prototype.eraseLine = function (y) {\n    this.eraseRight(0, y);\n};\nTerminal.prototype.blankLine = function (cur) {\n    var attr = cur\n        ? this.eraseAttr()\n        : this.defAttr;\n    var ch = [attr, ' ', 1], line = [], i = 0;\n    for (; i < this.cols; i++) {\n        line[i] = ch;\n    }\n    return line;\n};\nTerminal.prototype.ch = function (cur) {\n    return cur\n        ? [this.eraseAttr(), ' ', 1]\n        : [this.defAttr, ' ', 1];\n};\nTerminal.prototype.is = function (term) {\n    var name = this.termName;\n    return (name + '').indexOf(term) === 0;\n};\nTerminal.prototype.handler = function (data) {\n    if (this.options.disableStdin) {\n        return;\n    }\n    if (this.ybase !== this.ydisp) {\n        this.scrollToBottom();\n    }\n    this.emit('data', data);\n};\nTerminal.prototype.handleTitle = function (title) {\n    this.emit('title', title);\n};\nTerminal.prototype.index = function () {\n    this.y++;\n    if (this.y > this.scrollBottom) {\n        this.y--;\n        this.scroll();\n    }\n    if (this.x >= this.cols) {\n        this.x--;\n    }\n};\nTerminal.prototype.reverseIndex = function () {\n    var j;\n    if (this.y === this.scrollTop) {\n        this.lines.shiftElements(this.y + this.ybase, this.rows - 1, 1);\n        this.lines.set(this.y + this.ybase, this.blankLine(true));\n        this.updateRange(this.scrollTop);\n        this.updateRange(this.scrollBottom);\n    }\n    else {\n        this.y--;\n    }\n};\nTerminal.prototype.reset = function () {\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    var customKeydownHandler = this.customKeydownHandler;\n    Terminal.call(this, this.options);\n    this.customKeydownHandler = customKeydownHandler;\n    this.refresh(0, this.rows - 1);\n    this.viewport.syncScrollArea();\n};\nTerminal.prototype.tabSet = function () {\n    this.tabs[this.x] = true;\n};\nfunction on(el, type, handler, capture) {\n    if (!Array.isArray(el)) {\n        el = [el];\n    }\n    el.forEach(function (element) {\n        element.addEventListener(type, handler, capture || false);\n    });\n}\nfunction off(el, type, handler, capture) {\n    el.removeEventListener(type, handler, capture || false);\n}\nfunction cancel(ev, force) {\n    if (!this.cancelEvents && !force) {\n        return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n}\nfunction inherits(child, parent) {\n    function f() {\n        this.constructor = child;\n    }\n    f.prototype = parent.prototype;\n    child.prototype = new f;\n}\nfunction indexOf(obj, el) {\n    var i = obj.length;\n    while (i--) {\n        if (obj[i] === el)\n            return i;\n    }\n    return -1;\n}\nfunction isThirdLevelShift(term, ev) {\n    var thirdLevelKey = (term.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n        (term.browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\n    if (ev.type == 'keypress') {\n        return thirdLevelKey;\n    }\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n}\nTerminal.prototype.matchColor = matchColor;\nfunction matchColor(r1, g1, b1) {\n    var hash = (r1 << 16) | (g1 << 8) | b1;\n    if (matchColor._cache[hash] != null) {\n        return matchColor._cache[hash];\n    }\n    var ldiff = Infinity, li = -1, i = 0, c, r2, g2, b2, diff;\n    for (; i < Terminal.vcolors.length; i++) {\n        c = Terminal.vcolors[i];\n        r2 = c[0];\n        g2 = c[1];\n        b2 = c[2];\n        diff = matchColor.distance(r1, g1, b1, r2, g2, b2);\n        if (diff === 0) {\n            li = i;\n            break;\n        }\n        if (diff < ldiff) {\n            ldiff = diff;\n            li = i;\n        }\n    }\n    return matchColor._cache[hash] = li;\n}\nmatchColor._cache = {};\nmatchColor.distance = function (r1, g1, b1, r2, g2, b2) {\n    return Math.pow(30 * (r1 - r2), 2)\n        + Math.pow(59 * (g1 - g2), 2)\n        + Math.pow(11 * (b1 - b2), 2);\n};\nfunction each(obj, iter, con) {\n    if (obj.forEach)\n        return obj.forEach(iter, con);\n    for (var i = 0; i < obj.length; i++) {\n        iter.call(con, obj[i], i, obj);\n    }\n}\nfunction wasMondifierKeyOnlyEvent(ev) {\n    return ev.keyCode === 16 ||\n        ev.keyCode === 17 ||\n        ev.keyCode === 18;\n}\nfunction keys(obj) {\n    if (Object.keys)\n        return Object.keys(obj);\n    var key, keys = [];\n    for (key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n}\nTerminal.EventEmitter = EventEmitter_1.EventEmitter;\nTerminal.inherits = inherits;\nTerminal.on = on;\nTerminal.off = off;\nTerminal.cancel = cancel;\nmodule.exports = Terminal;\n\n//# sourceMappingURL=xterm.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/CompositionHelper.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositionHelper = (function () {\n    function CompositionHelper(textarea, compositionView, terminal) {\n        this.textarea = textarea;\n        this.compositionView = compositionView;\n        this.terminal = terminal;\n        this.isComposing = false;\n        this.isSendingComposition = false;\n        this.compositionPosition = { start: null, end: null };\n    }\n    CompositionHelper.prototype.compositionstart = function () {\n        this.isComposing = true;\n        this.compositionPosition.start = this.textarea.value.length;\n        this.compositionView.textContent = '';\n        this.compositionView.classList.add('active');\n    };\n    CompositionHelper.prototype.compositionupdate = function (ev) {\n        var _this = this;\n        this.compositionView.textContent = ev.data;\n        this.updateCompositionElements();\n        setTimeout(function () {\n            _this.compositionPosition.end = _this.textarea.value.length;\n        }, 0);\n    };\n    CompositionHelper.prototype.compositionend = function () {\n        this.finalizeComposition(true);\n    };\n    CompositionHelper.prototype.keydown = function (ev) {\n        if (this.isComposing || this.isSendingComposition) {\n            if (ev.keyCode === 229) {\n                return false;\n            }\n            else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n                return false;\n            }\n            else {\n                this.finalizeComposition(false);\n            }\n        }\n        if (ev.keyCode === 229) {\n            this.handleAnyTextareaChanges();\n            return false;\n        }\n        return true;\n    };\n    CompositionHelper.prototype.finalizeComposition = function (waitForPropogation) {\n        var _this = this;\n        this.compositionView.classList.remove('active');\n        this.isComposing = false;\n        this.clearTextareaPosition();\n        if (!waitForPropogation) {\n            this.isSendingComposition = false;\n            var input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n            this.terminal.handler(input);\n        }\n        else {\n            var currentCompositionPosition_1 = {\n                start: this.compositionPosition.start,\n                end: this.compositionPosition.end,\n            };\n            this.isSendingComposition = true;\n            setTimeout(function () {\n                if (_this.isSendingComposition) {\n                    _this.isSendingComposition = false;\n                    var input = void 0;\n                    if (_this.isComposing) {\n                        input = _this.textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\n                    }\n                    else {\n                        input = _this.textarea.value.substring(currentCompositionPosition_1.start);\n                    }\n                    _this.terminal.handler(input);\n                }\n            }, 0);\n        }\n    };\n    CompositionHelper.prototype.handleAnyTextareaChanges = function () {\n        var _this = this;\n        var oldValue = this.textarea.value;\n        setTimeout(function () {\n            if (!_this.isComposing) {\n                var newValue = _this.textarea.value;\n                var diff = newValue.replace(oldValue, '');\n                if (diff.length > 0) {\n                    _this.terminal.handler(diff);\n                }\n            }\n        }, 0);\n    };\n    CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\n        var _this = this;\n        if (!this.isComposing) {\n            return;\n        }\n        var cursor = this.terminal.element.querySelector('.terminal-cursor');\n        if (cursor) {\n            var xtermRows = this.terminal.element.querySelector('.xterm-rows');\n            var cursorTop = xtermRows.offsetTop + cursor.offsetTop;\n            this.compositionView.style.left = cursor.offsetLeft + 'px';\n            this.compositionView.style.top = cursorTop + 'px';\n            this.compositionView.style.height = cursor.offsetHeight + 'px';\n            this.compositionView.style.lineHeight = cursor.offsetHeight + 'px';\n            var compositionViewBounds = this.compositionView.getBoundingClientRect();\n            this.textarea.style.left = cursor.offsetLeft + 'px';\n            this.textarea.style.top = cursorTop + 'px';\n            this.textarea.style.width = compositionViewBounds.width + 'px';\n            this.textarea.style.height = compositionViewBounds.height + 'px';\n            this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n        }\n        if (!dontRecurse) {\n            setTimeout(function () { return _this.updateCompositionElements(true); }, 0);\n        }\n    };\n    ;\n    CompositionHelper.prototype.clearTextareaPosition = function () {\n        this.textarea.style.left = '';\n        this.textarea.style.top = '';\n    };\n    ;\n    return CompositionHelper;\n}());\nexports.CompositionHelper = CompositionHelper;\n\n//# sourceMappingURL=CompositionHelper.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/EventEmitter.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n;\nvar EventEmitter = (function () {\n    function EventEmitter() {\n        this._events = this._events || {};\n    }\n    EventEmitter.prototype.on = function (type, listener) {\n        this._events[type] = this._events[type] || [];\n        this._events[type].push(listener);\n    };\n    EventEmitter.prototype.off = function (type, listener) {\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        var i = obj.length;\n        while (i--) {\n            if (obj[i] === listener || obj[i].listener === listener) {\n                obj.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.removeAllListeners = function (type) {\n        if (this._events[type]) {\n            delete this._events[type];\n        }\n    };\n    EventEmitter.prototype.once = function (type, listener) {\n        function on() {\n            var args = Array.prototype.slice.call(arguments);\n            this.off(type, on);\n            return listener.apply(this, args);\n        }\n        on.listener = listener;\n        return this.on(type, on);\n    };\n    EventEmitter.prototype.emit = function (type) {\n        if (!this._events[type]) {\n            return;\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var obj = this._events[type];\n        for (var i = 0; i < obj.length; i++) {\n            obj[i].apply(this, args);\n        }\n    };\n    EventEmitter.prototype.listeners = function (type) {\n        return this._events[type] || [];\n    };\n    return EventEmitter;\n}());\nexports.EventEmitter = EventEmitter;\n\n//# sourceMappingURL=EventEmitter.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Viewport.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Viewport = (function () {\n    function Viewport(terminal, viewportElement, scrollArea, charMeasure) {\n        var _this = this;\n        this.terminal = terminal;\n        this.viewportElement = viewportElement;\n        this.scrollArea = scrollArea;\n        this.charMeasure = charMeasure;\n        this.currentRowHeight = 0;\n        this.lastRecordedBufferLength = 0;\n        this.lastRecordedViewportHeight = 0;\n        this.terminal.on('scroll', this.syncScrollArea.bind(this));\n        this.terminal.on('resize', this.syncScrollArea.bind(this));\n        this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n        setTimeout(function () { return _this.syncScrollArea(); }, 0);\n    }\n    Viewport.prototype.refresh = function () {\n        if (this.charMeasure.height > 0) {\n            var rowHeightChanged = this.charMeasure.height !== this.currentRowHeight;\n            if (rowHeightChanged) {\n                this.currentRowHeight = this.charMeasure.height;\n                this.viewportElement.style.lineHeight = this.charMeasure.height + 'px';\n                this.terminal.rowContainer.style.lineHeight = this.charMeasure.height + 'px';\n            }\n            var viewportHeightChanged = this.lastRecordedViewportHeight !== this.terminal.rows;\n            if (rowHeightChanged || viewportHeightChanged) {\n                this.lastRecordedViewportHeight = this.terminal.rows;\n                this.viewportElement.style.height = this.charMeasure.height * this.terminal.rows + 'px';\n            }\n            this.scrollArea.style.height = (this.charMeasure.height * this.lastRecordedBufferLength) + 'px';\n        }\n    };\n    Viewport.prototype.syncScrollArea = function () {\n        if (this.lastRecordedBufferLength !== this.terminal.lines.length) {\n            this.lastRecordedBufferLength = this.terminal.lines.length;\n            this.refresh();\n        }\n        else if (this.lastRecordedViewportHeight !== this.terminal.rows) {\n            this.refresh();\n        }\n        else {\n            if (this.charMeasure.height !== this.currentRowHeight) {\n                this.refresh();\n            }\n        }\n        var scrollTop = this.terminal.ydisp * this.currentRowHeight;\n        if (this.viewportElement.scrollTop !== scrollTop) {\n            this.viewportElement.scrollTop = scrollTop;\n        }\n    };\n    Viewport.prototype.onScroll = function (ev) {\n        var newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n        var diff = newRow - this.terminal.ydisp;\n        this.terminal.scrollDisp(diff, true);\n    };\n    Viewport.prototype.onWheel = function (ev) {\n        if (ev.deltaY === 0) {\n            return;\n        }\n        var multiplier = 1;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n            multiplier = this.currentRowHeight;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            multiplier = this.currentRowHeight * this.terminal.rows;\n        }\n        this.viewportElement.scrollTop += ev.deltaY * multiplier;\n        ev.preventDefault();\n    };\n    ;\n    return Viewport;\n}());\nexports.Viewport = Viewport;\n\n//# sourceMappingURL=Viewport.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/handlers/Clipboard.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction prepareTextForClipboard(text) {\n    var space = String.fromCharCode(32), nonBreakingSpace = String.fromCharCode(160), allNonBreakingSpaces = new RegExp(nonBreakingSpace, 'g'), processedText = text.split('\\n').map(function (line) {\n        var processedLine = line.replace(/\\s+$/g, '').replace(allNonBreakingSpaces, space);\n        return processedLine;\n    }).join('\\n');\n    return processedText;\n}\nexports.prepareTextForClipboard = prepareTextForClipboard;\nfunction copyHandler(ev, term) {\n    var copiedText = window.getSelection().toString(), text = prepareTextForClipboard(copiedText);\n    if (term.browser.isMSIE) {\n        window.clipboardData.setData('Text', text);\n    }\n    else {\n        ev.clipboardData.setData('text/plain', text);\n    }\n    ev.preventDefault();\n}\nexports.copyHandler = copyHandler;\nfunction pasteHandler(ev, term) {\n    ev.stopPropagation();\n    var text;\n    var dispatchPaste = function (text) {\n        term.handler(text);\n        term.textarea.value = '';\n        return term.cancel(ev);\n    };\n    if (term.browser.isMSIE) {\n        if (window.clipboardData) {\n            text = window.clipboardData.getData('Text');\n            dispatchPaste(text);\n        }\n    }\n    else {\n        if (ev.clipboardData) {\n            text = ev.clipboardData.getData('text/plain');\n            dispatchPaste(text);\n        }\n    }\n}\nexports.pasteHandler = pasteHandler;\nfunction rightClickHandler(ev, term) {\n    var s = document.getSelection(), selectedText = prepareTextForClipboard(s.toString()), clickIsOnSelection = false, x = ev.clientX, y = ev.clientY;\n    if (s.rangeCount) {\n        var r = s.getRangeAt(0), cr = r.getClientRects();\n        for (var i = 0; i < cr.length; i++) {\n            var rect = cr[i];\n            clickIsOnSelection = ((x > rect.left) && (x < rect.right) &&\n                (y > rect.top) && (y < rect.bottom));\n            if (clickIsOnSelection) {\n                break;\n            }\n        }\n        if (selectedText.match(/^\\s$/) || !selectedText.length) {\n            clickIsOnSelection = false;\n        }\n    }\n    if (!clickIsOnSelection) {\n        term.textarea.style.position = 'fixed';\n        term.textarea.style.width = '20px';\n        term.textarea.style.height = '20px';\n        term.textarea.style.left = (x - 10) + 'px';\n        term.textarea.style.top = (y - 10) + 'px';\n        term.textarea.style.zIndex = '1000';\n        term.textarea.focus();\n        setTimeout(function () {\n            term.textarea.style.position = null;\n            term.textarea.style.width = null;\n            term.textarea.style.height = null;\n            term.textarea.style.left = null;\n            term.textarea.style.top = null;\n            term.textarea.style.zIndex = null;\n        }, 4);\n    }\n}\nexports.rightClickHandler = rightClickHandler;\n\n//# sourceMappingURL=Clipboard.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/utils/CircularList.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CircularList = (function () {\n    function CircularList(maxLength) {\n        this._array = new Array(maxLength);\n        this._startIndex = 0;\n        this._length = 0;\n    }\n    Object.defineProperty(CircularList.prototype, \"maxLength\", {\n        get: function () {\n            return this._array.length;\n        },\n        set: function (newMaxLength) {\n            var newArray = new Array(newMaxLength);\n            for (var i = 0; i < Math.min(newMaxLength, this.length); i++) {\n                newArray[i] = this._array[this._getCyclicIndex(i)];\n            }\n            this._array = newArray;\n            this._startIndex = 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"length\", {\n        get: function () {\n            return this._length;\n        },\n        set: function (newLength) {\n            if (newLength > this._length) {\n                for (var i = this._length; i < newLength; i++) {\n                    this._array[i] = undefined;\n                }\n            }\n            this._length = newLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"forEach\", {\n        get: function () {\n            return this._array.forEach;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CircularList.prototype.get = function (index) {\n        return this._array[this._getCyclicIndex(index)];\n    };\n    CircularList.prototype.set = function (index, value) {\n        this._array[this._getCyclicIndex(index)] = value;\n    };\n    CircularList.prototype.push = function (value) {\n        this._array[this._getCyclicIndex(this._length)] = value;\n        if (this._length === this.maxLength) {\n            this._startIndex++;\n            if (this._startIndex === this.maxLength) {\n                this._startIndex = 0;\n            }\n        }\n        else {\n            this._length++;\n        }\n    };\n    CircularList.prototype.pop = function () {\n        return this._array[this._getCyclicIndex(this._length-- - 1)];\n    };\n    CircularList.prototype.splice = function (start, deleteCount) {\n        var items = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            items[_i - 2] = arguments[_i];\n        }\n        if (deleteCount) {\n            for (var i = start; i < this._length - deleteCount; i++) {\n                this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n            }\n            this._length -= deleteCount;\n        }\n        if (items && items.length) {\n            for (var i = this._length - 1; i >= start; i--) {\n                this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n            }\n            for (var i = 0; i < items.length; i++) {\n                this._array[this._getCyclicIndex(start + i)] = items[i];\n            }\n            if (this._length + items.length > this.maxLength) {\n                this._startIndex += (this._length + items.length) - this.maxLength;\n                this._length = this.maxLength;\n            }\n            else {\n                this._length += items.length;\n            }\n        }\n    };\n    CircularList.prototype.trimStart = function (count) {\n        if (count > this._length) {\n            count = this._length;\n        }\n        this._startIndex += count;\n        this._length -= count;\n    };\n    CircularList.prototype.shiftElements = function (start, count, offset) {\n        if (count <= 0) {\n            return;\n        }\n        if (start < 0 || start >= this._length) {\n            throw new Error('start argument out of range');\n        }\n        if (start + offset < 0) {\n            throw new Error('Cannot shift elements in list beyond index 0');\n        }\n        if (offset > 0) {\n            for (var i = count - 1; i >= 0; i--) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n            var expandListBy = (start + count + offset) - this._length;\n            if (expandListBy > 0) {\n                this._length += expandListBy;\n                while (this._length > this.maxLength) {\n                    this._length--;\n                    this._startIndex++;\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < count; i++) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n        }\n    };\n    CircularList.prototype._getCyclicIndex = function (index) {\n        return (this._startIndex + index) % this.maxLength;\n    };\n    return CircularList;\n}());\nexports.CircularList = CircularList;\n\n//# sourceMappingURL=CircularList.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/EscapeSequences.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar C0;\n(function (C0) {\n    C0.NUL = '\\x00';\n    C0.SOH = '\\x01';\n    C0.STX = '\\x02';\n    C0.ETX = '\\x03';\n    C0.EOT = '\\x04';\n    C0.ENQ = '\\x05';\n    C0.ACK = '\\x06';\n    C0.BEL = '\\x07';\n    C0.BS = '\\x08';\n    C0.HT = '\\x09';\n    C0.LF = '\\x0a';\n    C0.VT = '\\x0b';\n    C0.FF = '\\x0c';\n    C0.CR = '\\x0d';\n    C0.SO = '\\x0e';\n    C0.SI = '\\x0f';\n    C0.DLE = '\\x10';\n    C0.DC1 = '\\x11';\n    C0.DC2 = '\\x12';\n    C0.DC3 = '\\x13';\n    C0.DC4 = '\\x14';\n    C0.NAK = '\\x15';\n    C0.SYN = '\\x16';\n    C0.ETB = '\\x17';\n    C0.CAN = '\\x18';\n    C0.EM = '\\x19';\n    C0.SUB = '\\x1a';\n    C0.ESC = '\\x1b';\n    C0.FS = '\\x1c';\n    C0.GS = '\\x1d';\n    C0.RS = '\\x1e';\n    C0.US = '\\x1f';\n    C0.SP = '\\x20';\n    C0.DEL = '\\x7f';\n})(C0 = exports.C0 || (exports.C0 = {}));\n;\n\n//# sourceMappingURL=EscapeSequences.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/InputHandler.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\nvar Charsets_1 = require(\"./Charsets\");\nvar InputHandler = (function () {\n    function InputHandler(_terminal) {\n        this._terminal = _terminal;\n    }\n    InputHandler.prototype.addChar = function (char, code) {\n        if (char >= ' ') {\n            var ch_width = wcwidth(code);\n            if (this._terminal.charset && this._terminal.charset[char]) {\n                char = this._terminal.charset[char];\n            }\n            var row = this._terminal.y + this._terminal.ybase;\n            if (!ch_width && this._terminal.x) {\n                if (this._terminal.lines.get(row)[this._terminal.x - 1]) {\n                    if (!this._terminal.lines.get(row)[this._terminal.x - 1][2]) {\n                        if (this._terminal.lines.get(row)[this._terminal.x - 2])\n                            this._terminal.lines.get(row)[this._terminal.x - 2][1] += char;\n                    }\n                    else {\n                        this._terminal.lines.get(row)[this._terminal.x - 1][1] += char;\n                    }\n                    this._terminal.updateRange(this._terminal.y);\n                }\n                return;\n            }\n            if (this._terminal.x + ch_width - 1 >= this._terminal.cols) {\n                if (this._terminal.wraparoundMode) {\n                    this._terminal.x = 0;\n                    this._terminal.y++;\n                    if (this._terminal.y > this._terminal.scrollBottom) {\n                        this._terminal.y--;\n                        this._terminal.scroll();\n                    }\n                }\n                else {\n                    if (ch_width === 2)\n                        return;\n                }\n            }\n            row = this._terminal.y + this._terminal.ybase;\n            if (this._terminal.insertMode) {\n                for (var moves = 0; moves < ch_width; ++moves) {\n                    var removed = this._terminal.lines.get(this._terminal.y + this._terminal.ybase).pop();\n                    if (removed[2] === 0\n                        && this._terminal.lines.get(row)[this._terminal.cols - 2]\n                        && this._terminal.lines.get(row)[this._terminal.cols - 2][2] === 2)\n                        this._terminal.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1];\n                    this._terminal.lines.get(row).splice(this._terminal.x, 0, [this._terminal.curAttr, ' ', 1]);\n                }\n            }\n            this._terminal.lines.get(row)[this._terminal.x] = [this._terminal.curAttr, char, ch_width];\n            this._terminal.x++;\n            this._terminal.updateRange(this._terminal.y);\n            if (ch_width === 2) {\n                this._terminal.lines.get(row)[this._terminal.x] = [this._terminal.curAttr, '', 0];\n                this._terminal.x++;\n            }\n        }\n    };\n    InputHandler.prototype.bell = function () {\n        var _this = this;\n        if (!this._terminal.visualBell) {\n            return;\n        }\n        this._terminal.element.style.borderColor = 'white';\n        setTimeout(function () { return _this._terminal.element.style.borderColor = ''; }, 10);\n        if (this._terminal.popOnBell) {\n            this._terminal.focus();\n        }\n    };\n    InputHandler.prototype.lineFeed = function () {\n        if (this._terminal.convertEol) {\n            this._terminal.x = 0;\n        }\n        this._terminal.y++;\n        if (this._terminal.y > this._terminal.scrollBottom) {\n            this._terminal.y--;\n            this._terminal.scroll();\n        }\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x--;\n        }\n    };\n    InputHandler.prototype.carriageReturn = function () {\n        this._terminal.x = 0;\n    };\n    InputHandler.prototype.backspace = function () {\n        if (this._terminal.x > 0) {\n            this._terminal.x--;\n        }\n    };\n    InputHandler.prototype.tab = function () {\n        this._terminal.x = this._terminal.nextStop();\n    };\n    InputHandler.prototype.shiftOut = function () {\n        this._terminal.setgLevel(1);\n    };\n    InputHandler.prototype.shiftIn = function () {\n        this._terminal.setgLevel(0);\n    };\n    InputHandler.prototype.insertChars = function (params) {\n        var param, row, j, ch;\n        param = params[0];\n        if (param < 1)\n            param = 1;\n        row = this._terminal.y + this._terminal.ybase;\n        j = this._terminal.x;\n        ch = [this._terminal.eraseAttr(), ' ', 1];\n        while (param-- && j < this._terminal.cols) {\n            this._terminal.lines.get(row).splice(j++, 0, ch);\n            this._terminal.lines.get(row).pop();\n        }\n    };\n    InputHandler.prototype.cursorUp = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y -= param;\n        if (this._terminal.y < 0) {\n            this._terminal.y = 0;\n        }\n    };\n    InputHandler.prototype.cursorDown = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y += param;\n        if (this._terminal.y >= this._terminal.rows) {\n            this._terminal.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x--;\n        }\n    };\n    InputHandler.prototype.cursorForward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.x += param;\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.cursorBackward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x--;\n        }\n        this._terminal.x -= param;\n        if (this._terminal.x < 0) {\n            this._terminal.x = 0;\n        }\n    };\n    InputHandler.prototype.cursorNextLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y += param;\n        if (this._terminal.y >= this._terminal.rows) {\n            this._terminal.y = this._terminal.rows - 1;\n        }\n        this._terminal.x = 0;\n    };\n    ;\n    InputHandler.prototype.cursorPrecedingLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y -= param;\n        if (this._terminal.y < 0) {\n            this._terminal.y = 0;\n        }\n        this._terminal.x = 0;\n    };\n    ;\n    InputHandler.prototype.cursorCharAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.x = param - 1;\n    };\n    InputHandler.prototype.cursorPosition = function (params) {\n        var row, col;\n        row = params[0] - 1;\n        if (params.length >= 2) {\n            col = params[1] - 1;\n        }\n        else {\n            col = 0;\n        }\n        if (row < 0) {\n            row = 0;\n        }\n        else if (row >= this._terminal.rows) {\n            row = this._terminal.rows - 1;\n        }\n        if (col < 0) {\n            col = 0;\n        }\n        else if (col >= this._terminal.cols) {\n            col = this._terminal.cols - 1;\n        }\n        this._terminal.x = col;\n        this._terminal.y = row;\n    };\n    InputHandler.prototype.cursorForwardTab = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.x = this._terminal.nextStop();\n        }\n    };\n    InputHandler.prototype.eraseInDisplay = function (params) {\n        var j;\n        switch (params[0]) {\n            case 0:\n                this._terminal.eraseRight(this._terminal.x, this._terminal.y);\n                j = this._terminal.y + 1;\n                for (; j < this._terminal.rows; j++) {\n                    this._terminal.eraseLine(j);\n                }\n                break;\n            case 1:\n                this._terminal.eraseLeft(this._terminal.x, this._terminal.y);\n                j = this._terminal.y;\n                while (j--) {\n                    this._terminal.eraseLine(j);\n                }\n                break;\n            case 2:\n                j = this._terminal.rows;\n                while (j--)\n                    this._terminal.eraseLine(j);\n                break;\n            case 3:\n                var scrollBackSize = this._terminal.lines.length - this._terminal.rows;\n                if (scrollBackSize > 0) {\n                    this._terminal.lines.trimStart(scrollBackSize);\n                    this._terminal.ybase = Math.max(this._terminal.ybase - scrollBackSize, 0);\n                    this._terminal.ydisp = Math.max(this._terminal.ydisp - scrollBackSize, 0);\n                }\n                break;\n        }\n    };\n    InputHandler.prototype.eraseInLine = function (params) {\n        switch (params[0]) {\n            case 0:\n                this._terminal.eraseRight(this._terminal.x, this._terminal.y);\n                break;\n            case 1:\n                this._terminal.eraseLeft(this._terminal.x, this._terminal.y);\n                break;\n            case 2:\n                this._terminal.eraseLine(this._terminal.y);\n                break;\n        }\n    };\n    InputHandler.prototype.insertLines = function (params) {\n        var param, row, j;\n        param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        row = this._terminal.y + this._terminal.ybase;\n        j = this._terminal.rows - 1 - this._terminal.scrollBottom;\n        j = this._terminal.rows - 1 + this._terminal.ybase - j + 1;\n        while (param--) {\n            if (this._terminal.lines.length === this._terminal.lines.maxLength) {\n                this._terminal.lines.trimStart(1);\n                this._terminal.ybase--;\n                this._terminal.ydisp--;\n                row--;\n                j--;\n            }\n            this._terminal.lines.splice(row, 0, this._terminal.blankLine(true));\n            this._terminal.lines.splice(j, 1);\n        }\n        this._terminal.updateRange(this._terminal.y);\n        this._terminal.updateRange(this._terminal.scrollBottom);\n    };\n    InputHandler.prototype.deleteLines = function (params) {\n        var param, row, j;\n        param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        row = this._terminal.y + this._terminal.ybase;\n        j = this._terminal.rows - 1 - this._terminal.scrollBottom;\n        j = this._terminal.rows - 1 + this._terminal.ybase - j;\n        while (param--) {\n            if (this._terminal.lines.length === this._terminal.lines.maxLength) {\n                this._terminal.lines.trimStart(1);\n                this._terminal.ybase -= 1;\n                this._terminal.ydisp -= 1;\n            }\n            this._terminal.lines.splice(j + 1, 0, this._terminal.blankLine(true));\n            this._terminal.lines.splice(row, 1);\n        }\n        this._terminal.updateRange(this._terminal.y);\n        this._terminal.updateRange(this._terminal.scrollBottom);\n    };\n    InputHandler.prototype.deleteChars = function (params) {\n        var param, row, ch;\n        param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        row = this._terminal.y + this._terminal.ybase;\n        ch = [this._terminal.eraseAttr(), ' ', 1];\n        while (param--) {\n            this._terminal.lines.get(row).splice(this._terminal.x, 1);\n            this._terminal.lines.get(row).push(ch);\n        }\n    };\n    InputHandler.prototype.scrollUp = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollTop, 1);\n            this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollBottom, 0, this._terminal.blankLine());\n        }\n        this._terminal.updateRange(this._terminal.scrollTop);\n        this._terminal.updateRange(this._terminal.scrollBottom);\n    };\n    InputHandler.prototype.scrollDown = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollBottom, 1);\n            this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollTop, 0, this._terminal.blankLine());\n        }\n        this._terminal.updateRange(this._terminal.scrollTop);\n        this._terminal.updateRange(this._terminal.scrollBottom);\n    };\n    InputHandler.prototype.eraseChars = function (params) {\n        var param, row, j, ch;\n        param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        row = this._terminal.y + this._terminal.ybase;\n        j = this._terminal.x;\n        ch = [this._terminal.eraseAttr(), ' ', 1];\n        while (param-- && j < this._terminal.cols) {\n            this._terminal.lines.get(row)[j++] = ch;\n        }\n    };\n    InputHandler.prototype.cursorBackwardTab = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.x = this._terminal.prevStop();\n        }\n    };\n    InputHandler.prototype.charPosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.x = param - 1;\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.HPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.x += param;\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.repeatPrecedingCharacter = function (params) {\n        var param = params[0] || 1, line = this._terminal.lines.get(this._terminal.ybase + this._terminal.y), ch = line[this._terminal.x - 1] || [this._terminal.defAttr, ' ', 1];\n        while (param--) {\n            line[this._terminal.x++] = ch;\n        }\n    };\n    InputHandler.prototype.sendDeviceAttributes = function (params) {\n        if (params[0] > 0) {\n            return;\n        }\n        if (!this._terminal.prefix) {\n            if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[?1;2c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[?6c');\n            }\n        }\n        else if (this._terminal.prefix === '>') {\n            if (this._terminal.is('xterm')) {\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>0;276;0c');\n            }\n            else if (this._terminal.is('rxvt-unicode')) {\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>85;95;0c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.send(params[0] + 'c');\n            }\n            else if (this._terminal.is('screen')) {\n                this._terminal.send(EscapeSequences_1.C0.ESC + '[>83;40003;0c');\n            }\n        }\n    };\n    InputHandler.prototype.linePosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y = param - 1;\n        if (this._terminal.y >= this._terminal.rows) {\n            this._terminal.y = this._terminal.rows - 1;\n        }\n    };\n    InputHandler.prototype.VPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.y += param;\n        if (this._terminal.y >= this._terminal.rows) {\n            this._terminal.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x--;\n        }\n    };\n    InputHandler.prototype.HVPosition = function (params) {\n        if (params[0] < 1)\n            params[0] = 1;\n        if (params[1] < 1)\n            params[1] = 1;\n        this._terminal.y = params[0] - 1;\n        if (this._terminal.y >= this._terminal.rows) {\n            this._terminal.y = this._terminal.rows - 1;\n        }\n        this._terminal.x = params[1] - 1;\n        if (this._terminal.x >= this._terminal.cols) {\n            this._terminal.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.tabClear = function (params) {\n        var param = params[0];\n        if (param <= 0) {\n            delete this._terminal.tabs[this._terminal.x];\n        }\n        else if (param === 3) {\n            this._terminal.tabs = {};\n        }\n    };\n    InputHandler.prototype.setMode = function (params) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.setMode([params[i]]);\n            }\n            return;\n        }\n        if (!this._terminal.prefix) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = true;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (this._terminal.prefix === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = true;\n                    break;\n                case 2:\n                    this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(1, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(2, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(3, Charsets_1.DEFAULT_CHARSET);\n                    break;\n                case 3:\n                    this._terminal.savedCols = this._terminal.cols;\n                    this._terminal.resize(132, this._terminal.rows);\n                    break;\n                case 6:\n                    this._terminal.originMode = true;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = true;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Serial port requested application keypad.');\n                    this._terminal.applicationKeypad = true;\n                    this._terminal.viewport.syncScrollArea();\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = params[0] === 9;\n                    this._terminal.vt200Mouse = params[0] === 1000;\n                    this._terminal.normalMouse = params[0] > 1000;\n                    this._terminal.mouseEvents = true;\n                    this._terminal.element.style.cursor = 'default';\n                    this._terminal.log('Binding to mouse events.');\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = true;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = true;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = true;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = true;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = false;\n                    break;\n                case 1049:\n                    ;\n                case 47:\n                case 1047:\n                    if (!this._terminal.normal) {\n                        var normal = {\n                            lines: this._terminal.lines,\n                            ybase: this._terminal.ybase,\n                            ydisp: this._terminal.ydisp,\n                            x: this._terminal.x,\n                            y: this._terminal.y,\n                            scrollTop: this._terminal.scrollTop,\n                            scrollBottom: this._terminal.scrollBottom,\n                            tabs: this._terminal.tabs\n                        };\n                        this._terminal.reset();\n                        this._terminal.viewport.syncScrollArea();\n                        this._terminal.normal = normal;\n                        this._terminal.showCursor();\n                    }\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.resetMode = function (params) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.resetMode([params[i]]);\n            }\n            return;\n        }\n        if (!this._terminal.prefix) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = false;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (this._terminal.prefix === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = false;\n                    break;\n                case 3:\n                    if (this._terminal.cols === 132 && this._terminal.savedCols) {\n                        this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\n                    }\n                    delete this._terminal.savedCols;\n                    break;\n                case 6:\n                    this._terminal.originMode = false;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = false;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Switching back to normal keypad.');\n                    this._terminal.applicationKeypad = false;\n                    this._terminal.viewport.syncScrollArea();\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = false;\n                    this._terminal.vt200Mouse = false;\n                    this._terminal.normalMouse = false;\n                    this._terminal.mouseEvents = false;\n                    this._terminal.element.style.cursor = '';\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = false;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = false;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = false;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = false;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = true;\n                    break;\n                case 1049:\n                    ;\n                case 47:\n                case 1047:\n                    if (this._terminal.normal) {\n                        this._terminal.lines = this._terminal.normal.lines;\n                        this._terminal.ybase = this._terminal.normal.ybase;\n                        this._terminal.ydisp = this._terminal.normal.ydisp;\n                        this._terminal.x = this._terminal.normal.x;\n                        this._terminal.y = this._terminal.normal.y;\n                        this._terminal.scrollTop = this._terminal.normal.scrollTop;\n                        this._terminal.scrollBottom = this._terminal.normal.scrollBottom;\n                        this._terminal.tabs = this._terminal.normal.tabs;\n                        this._terminal.normal = null;\n                        this._terminal.refresh(0, this._terminal.rows - 1);\n                        this._terminal.viewport.syncScrollArea();\n                        this._terminal.showCursor();\n                    }\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.charAttributes = function (params) {\n        if (params.length === 1 && params[0] === 0) {\n            this._terminal.curAttr = this._terminal.defAttr;\n            return;\n        }\n        var l = params.length, i = 0, flags = this._terminal.curAttr >> 18, fg = (this._terminal.curAttr >> 9) & 0x1ff, bg = this._terminal.curAttr & 0x1ff, p;\n        for (; i < l; i++) {\n            p = params[i];\n            if (p >= 30 && p <= 37) {\n                fg = p - 30;\n            }\n            else if (p >= 40 && p <= 47) {\n                bg = p - 40;\n            }\n            else if (p >= 90 && p <= 97) {\n                p += 8;\n                fg = p - 90;\n            }\n            else if (p >= 100 && p <= 107) {\n                p += 8;\n                bg = p - 100;\n            }\n            else if (p === 0) {\n                flags = this._terminal.defAttr >> 18;\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\n                bg = this._terminal.defAttr & 0x1ff;\n            }\n            else if (p === 1) {\n                flags |= 1;\n            }\n            else if (p === 4) {\n                flags |= 2;\n            }\n            else if (p === 5) {\n                flags |= 4;\n            }\n            else if (p === 7) {\n                flags |= 8;\n            }\n            else if (p === 8) {\n                flags |= 16;\n            }\n            else if (p === 22) {\n                flags &= ~1;\n            }\n            else if (p === 24) {\n                flags &= ~2;\n            }\n            else if (p === 25) {\n                flags &= ~4;\n            }\n            else if (p === 27) {\n                flags &= ~8;\n            }\n            else if (p === 28) {\n                flags &= ~16;\n            }\n            else if (p === 39) {\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\n            }\n            else if (p === 49) {\n                bg = this._terminal.defAttr & 0x1ff;\n            }\n            else if (p === 38) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    fg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n                    if (fg === -1)\n                        fg = 0x1ff;\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    fg = p;\n                }\n            }\n            else if (p === 48) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    bg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n                    if (bg === -1)\n                        bg = 0x1ff;\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    bg = p;\n                }\n            }\n            else if (p === 100) {\n                fg = (this._terminal.defAttr >> 9) & 0x1ff;\n                bg = this._terminal.defAttr & 0x1ff;\n            }\n            else {\n                this._terminal.error('Unknown SGR attribute: %d.', p);\n            }\n        }\n        this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\n    };\n    InputHandler.prototype.deviceStatus = function (params) {\n        if (!this._terminal.prefix) {\n            switch (params[0]) {\n                case 5:\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '[0n');\n                    break;\n                case 6:\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '['\n                        + (this._terminal.y + 1)\n                        + ';'\n                        + (this._terminal.x + 1)\n                        + 'R');\n                    break;\n            }\n        }\n        else if (this._terminal.prefix === '?') {\n            switch (params[0]) {\n                case 6:\n                    this._terminal.send(EscapeSequences_1.C0.ESC + '[?'\n                        + (this._terminal.y + 1)\n                        + ';'\n                        + (this._terminal.x + 1)\n                        + 'R');\n                    break;\n                case 15:\n                    break;\n                case 25:\n                    break;\n                case 26:\n                    break;\n                case 53:\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.softReset = function (params) {\n        this._terminal.cursorHidden = false;\n        this._terminal.insertMode = false;\n        this._terminal.originMode = false;\n        this._terminal.wraparoundMode = true;\n        this._terminal.applicationKeypad = false;\n        this._terminal.viewport.syncScrollArea();\n        this._terminal.applicationCursor = false;\n        this._terminal.scrollTop = 0;\n        this._terminal.scrollBottom = this._terminal.rows - 1;\n        this._terminal.curAttr = this._terminal.defAttr;\n        this._terminal.x = this._terminal.y = 0;\n        this._terminal.charset = null;\n        this._terminal.glevel = 0;\n        this._terminal.charsets = [null];\n    };\n    InputHandler.prototype.setCursorStyle = function (params) {\n        var param = params[0] < 1 ? 1 : params[0];\n        switch (param) {\n            case 1:\n            case 2:\n                this._terminal.setOption('cursorStyle', 'block');\n                break;\n            case 3:\n            case 4:\n                this._terminal.setOption('cursorStyle', 'underline');\n                break;\n            case 5:\n            case 6:\n                this._terminal.setOption('cursorStyle', 'bar');\n                break;\n        }\n        var isBlinking = param % 2 === 1;\n        this._terminal.setOption('cursorBlink', isBlinking);\n    };\n    InputHandler.prototype.setScrollRegion = function (params) {\n        if (this._terminal.prefix)\n            return;\n        this._terminal.scrollTop = (params[0] || 1) - 1;\n        this._terminal.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\n        this._terminal.x = 0;\n        this._terminal.y = 0;\n    };\n    InputHandler.prototype.saveCursor = function (params) {\n        this._terminal.savedX = this._terminal.x;\n        this._terminal.savedY = this._terminal.y;\n    };\n    InputHandler.prototype.restoreCursor = function (params) {\n        this._terminal.x = this._terminal.savedX || 0;\n        this._terminal.y = this._terminal.savedY || 0;\n    };\n    return InputHandler;\n}());\nexports.InputHandler = InputHandler;\nvar wcwidth = (function (opts) {\n    var COMBINING = [\n        [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n        [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n        [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n        [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n        [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n        [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n        [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n        [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n        [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n        [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n        [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n        [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n        [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n        [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n        [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n        [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n        [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n        [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n        [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n        [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n        [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n        [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n        [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n        [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n        [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n        [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n        [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n        [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n        [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n        [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n        [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n        [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n        [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n        [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n        [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n        [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n        [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n        [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n        [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n        [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n        [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n        [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n        [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB],\n        [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n        [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n        [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n        [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n        [0xE0100, 0xE01EF]\n    ];\n    function bisearch(ucs) {\n        var min = 0;\n        var max = COMBINING.length - 1;\n        var mid;\n        if (ucs < COMBINING[0][0] || ucs > COMBINING[max][1])\n            return false;\n        while (max >= min) {\n            mid = Math.floor((min + max) / 2);\n            if (ucs > COMBINING[mid][1])\n                min = mid + 1;\n            else if (ucs < COMBINING[mid][0])\n                max = mid - 1;\n            else\n                return true;\n        }\n        return false;\n    }\n    function wcwidth(ucs) {\n        if (ucs === 0)\n            return opts.nul;\n        if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))\n            return opts.control;\n        if (bisearch(ucs))\n            return 0;\n        if (isWide(ucs)) {\n            return 2;\n        }\n        return 1;\n    }\n    function isWide(ucs) {\n        return (ucs >= 0x1100 && (ucs <= 0x115f ||\n            ucs === 0x2329 ||\n            ucs === 0x232a ||\n            (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||\n            (ucs >= 0xac00 && ucs <= 0xd7a3) ||\n            (ucs >= 0xf900 && ucs <= 0xfaff) ||\n            (ucs >= 0xfe10 && ucs <= 0xfe19) ||\n            (ucs >= 0xfe30 && ucs <= 0xfe6f) ||\n            (ucs >= 0xff00 && ucs <= 0xff60) ||\n            (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n            (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n            (ucs >= 0x30000 && ucs <= 0x3fffd)));\n    }\n    return wcwidth;\n})({ nul: 0, control: 0 });\n\n//# sourceMappingURL=InputHandler.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Charsets.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHARSETS = {};\nexports.DEFAULT_CHARSET = exports.CHARSETS['B'];\nexports.CHARSETS['0'] = {\n    '`': '\\u25c6',\n    'a': '\\u2592',\n    'b': '\\u0009',\n    'c': '\\u000c',\n    'd': '\\u000d',\n    'e': '\\u000a',\n    'f': '\\u00b0',\n    'g': '\\u00b1',\n    'h': '\\u2424',\n    'i': '\\u000b',\n    'j': '\\u2518',\n    'k': '\\u2510',\n    'l': '\\u250c',\n    'm': '\\u2514',\n    'n': '\\u253c',\n    'o': '\\u23ba',\n    'p': '\\u23bb',\n    'q': '\\u2500',\n    'r': '\\u23bc',\n    's': '\\u23bd',\n    't': '\\u251c',\n    'u': '\\u2524',\n    'v': '\\u2534',\n    'w': '\\u252c',\n    'x': '\\u2502',\n    'y': '\\u2264',\n    'z': '\\u2265',\n    '{': '\\u03c0',\n    '|': '\\u2260',\n    '}': '\\u00a3',\n    '~': '\\u00b7'\n};\nexports.CHARSETS['A'] = {\n    '#': '£'\n};\nexports.CHARSETS['B'] = null;\nexports.CHARSETS['4'] = {\n    '#': '£',\n    '@': '¾',\n    '[': 'ij',\n    '\\\\': '½',\n    ']': '|',\n    '{': '¨',\n    '|': 'f',\n    '}': '¼',\n    '~': '´'\n};\nexports.CHARSETS['C'] =\n    exports.CHARSETS['5'] = {\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['R'] = {\n    '#': '£',\n    '@': 'à',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': '§',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': '¨'\n};\nexports.CHARSETS['Q'] = {\n    '@': 'à',\n    '[': 'â',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '`': 'ô',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': 'û'\n};\nexports.CHARSETS['K'] = {\n    '@': '§',\n    '[': 'Ä',\n    '\\\\': 'Ö',\n    ']': 'Ü',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'ß'\n};\nexports.CHARSETS['Y'] = {\n    '#': '£',\n    '@': '§',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': 'é',\n    '`': 'ù',\n    '{': 'à',\n    '|': 'ò',\n    '}': 'è',\n    '~': 'ì'\n};\nexports.CHARSETS['E'] =\n    exports.CHARSETS['6'] = {\n        '@': 'Ä',\n        '[': 'Æ',\n        '\\\\': 'Ø',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'ä',\n        '{': 'æ',\n        '|': 'ø',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['Z'] = {\n    '#': '£',\n    '@': '§',\n    '[': '¡',\n    '\\\\': 'Ñ',\n    ']': '¿',\n    '{': '°',\n    '|': 'ñ',\n    '}': 'ç'\n};\nexports.CHARSETS['H'] =\n    exports.CHARSETS['7'] = {\n        '@': 'É',\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['='] = {\n    '#': 'ù',\n    '@': 'à',\n    '[': 'é',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '_': 'è',\n    '`': 'ô',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'û'\n};\n\n//# sourceMappingURL=Charsets.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Parser.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\nvar Charsets_1 = require(\"./Charsets\");\nvar normalStateHandler = {};\nnormalStateHandler[EscapeSequences_1.C0.BEL] = function (parser, handler) { return handler.bell(); };\nnormalStateHandler[EscapeSequences_1.C0.LF] = function (parser, handler) { return handler.lineFeed(); };\nnormalStateHandler[EscapeSequences_1.C0.VT] = normalStateHandler[EscapeSequences_1.C0.LF];\nnormalStateHandler[EscapeSequences_1.C0.FF] = normalStateHandler[EscapeSequences_1.C0.LF];\nnormalStateHandler[EscapeSequences_1.C0.CR] = function (parser, handler) { return handler.carriageReturn(); };\nnormalStateHandler[EscapeSequences_1.C0.BS] = function (parser, handler) { return handler.backspace(); };\nnormalStateHandler[EscapeSequences_1.C0.HT] = function (parser, handler) { return handler.tab(); };\nnormalStateHandler[EscapeSequences_1.C0.SO] = function (parser, handler) { return handler.shiftOut(); };\nnormalStateHandler[EscapeSequences_1.C0.SI] = function (parser, handler) { return handler.shiftIn(); };\nnormalStateHandler[EscapeSequences_1.C0.ESC] = function (parser, handler) { return parser.setState(ParserState.ESCAPED); };\nvar escapedStateHandler = {};\nescapedStateHandler['['] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.CSI_PARAM);\n};\nescapedStateHandler[']'] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.OSC);\n};\nescapedStateHandler['P'] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.DCS);\n};\nescapedStateHandler['_'] = function (parser, terminal) {\n    parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['^'] = function (parser, terminal) {\n    parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['c'] = function (parser, terminal) {\n    terminal.reset();\n};\nescapedStateHandler['E'] = function (parser, terminal) {\n    terminal.x = 0;\n    terminal.index();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['D'] = function (parser, terminal) {\n    terminal.index();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['M'] = function (parser, terminal) {\n    terminal.reverseIndex();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['%'] = function (parser, terminal) {\n    terminal.setgLevel(0);\n    terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n    parser.setState(ParserState.NORMAL);\n    parser.skipNextChar();\n};\nescapedStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\nvar csiParamStateHandler = {};\ncsiParamStateHandler['?'] = function (parser) { return parser.setPrefix('?'); };\ncsiParamStateHandler['>'] = function (parser) { return parser.setPrefix('>'); };\ncsiParamStateHandler['!'] = function (parser) { return parser.setPrefix('!'); };\ncsiParamStateHandler['0'] = function (parser) { return parser.setParam(parser.getParam() * 10); };\ncsiParamStateHandler['1'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 1); };\ncsiParamStateHandler['2'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 2); };\ncsiParamStateHandler['3'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 3); };\ncsiParamStateHandler['4'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 4); };\ncsiParamStateHandler['5'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 5); };\ncsiParamStateHandler['6'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 6); };\ncsiParamStateHandler['7'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 7); };\ncsiParamStateHandler['8'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 8); };\ncsiParamStateHandler['9'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 9); };\ncsiParamStateHandler['$'] = function (parser) { return parser.setPostfix('$'); };\ncsiParamStateHandler['\"'] = function (parser) { return parser.setPostfix('\"'); };\ncsiParamStateHandler[' '] = function (parser) { return parser.setPostfix(' '); };\ncsiParamStateHandler['\\''] = function (parser) { return parser.setPostfix('\\''); };\ncsiParamStateHandler[';'] = function (parser) { return parser.finalizeParam(); };\ncsiParamStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\nvar csiStateHandler = {};\ncsiStateHandler['@'] = function (handler, params, prefix) { return handler.insertChars(params); };\ncsiStateHandler['A'] = function (handler, params, prefix) { return handler.cursorUp(params); };\ncsiStateHandler['B'] = function (handler, params, prefix) { return handler.cursorDown(params); };\ncsiStateHandler['C'] = function (handler, params, prefix) { return handler.cursorForward(params); };\ncsiStateHandler['D'] = function (handler, params, prefix) { return handler.cursorBackward(params); };\ncsiStateHandler['E'] = function (handler, params, prefix) { return handler.cursorNextLine(params); };\ncsiStateHandler['F'] = function (handler, params, prefix) { return handler.cursorPrecedingLine(params); };\ncsiStateHandler['G'] = function (handler, params, prefix) { return handler.cursorCharAbsolute(params); };\ncsiStateHandler['H'] = function (handler, params, prefix) { return handler.cursorPosition(params); };\ncsiStateHandler['I'] = function (handler, params, prefix) { return handler.cursorForwardTab(params); };\ncsiStateHandler['J'] = function (handler, params, prefix) { return handler.eraseInDisplay(params); };\ncsiStateHandler['K'] = function (handler, params, prefix) { return handler.eraseInLine(params); };\ncsiStateHandler['L'] = function (handler, params, prefix) { return handler.insertLines(params); };\ncsiStateHandler['M'] = function (handler, params, prefix) { return handler.deleteLines(params); };\ncsiStateHandler['P'] = function (handler, params, prefix) { return handler.deleteChars(params); };\ncsiStateHandler['S'] = function (handler, params, prefix) { return handler.scrollUp(params); };\ncsiStateHandler['T'] = function (handler, params, prefix) {\n    if (params.length < 2 && !prefix) {\n        handler.scrollDown(params);\n    }\n};\ncsiStateHandler['X'] = function (handler, params, prefix) { return handler.eraseChars(params); };\ncsiStateHandler['Z'] = function (handler, params, prefix) { return handler.cursorBackwardTab(params); };\ncsiStateHandler['`'] = function (handler, params, prefix) { return handler.charPosAbsolute(params); };\ncsiStateHandler['a'] = function (handler, params, prefix) { return handler.HPositionRelative(params); };\ncsiStateHandler['b'] = function (handler, params, prefix) { return handler.repeatPrecedingCharacter(params); };\ncsiStateHandler['c'] = function (handler, params, prefix) { return handler.sendDeviceAttributes(params); };\ncsiStateHandler['d'] = function (handler, params, prefix) { return handler.linePosAbsolute(params); };\ncsiStateHandler['e'] = function (handler, params, prefix) { return handler.VPositionRelative(params); };\ncsiStateHandler['f'] = function (handler, params, prefix) { return handler.HVPosition(params); };\ncsiStateHandler['g'] = function (handler, params, prefix) { return handler.tabClear(params); };\ncsiStateHandler['h'] = function (handler, params, prefix) { return handler.setMode(params); };\ncsiStateHandler['l'] = function (handler, params, prefix) { return handler.resetMode(params); };\ncsiStateHandler['m'] = function (handler, params, prefix) { return handler.charAttributes(params); };\ncsiStateHandler['n'] = function (handler, params, prefix) { return handler.deviceStatus(params); };\ncsiStateHandler['p'] = function (handler, params, prefix) {\n    switch (prefix) {\n        case '!':\n            handler.softReset(params);\n            break;\n    }\n};\ncsiStateHandler['q'] = function (handler, params, prefix, postfix) {\n    if (postfix === ' ') {\n        handler.setCursorStyle(params);\n    }\n};\ncsiStateHandler['r'] = function (handler, params) { return handler.setScrollRegion(params); };\ncsiStateHandler['s'] = function (handler, params) { return handler.saveCursor(params); };\ncsiStateHandler['u'] = function (handler, params) { return handler.restoreCursor(params); };\ncsiStateHandler[EscapeSequences_1.C0.CAN] = function (handler, params, prefix, postfix, parser) { return parser.setState(ParserState.NORMAL); };\nvar ParserState;\n(function (ParserState) {\n    ParserState[ParserState[\"NORMAL\"] = 0] = \"NORMAL\";\n    ParserState[ParserState[\"ESCAPED\"] = 1] = \"ESCAPED\";\n    ParserState[ParserState[\"CSI_PARAM\"] = 2] = \"CSI_PARAM\";\n    ParserState[ParserState[\"CSI\"] = 3] = \"CSI\";\n    ParserState[ParserState[\"OSC\"] = 4] = \"OSC\";\n    ParserState[ParserState[\"CHARSET\"] = 5] = \"CHARSET\";\n    ParserState[ParserState[\"DCS\"] = 6] = \"DCS\";\n    ParserState[ParserState[\"IGNORE\"] = 7] = \"IGNORE\";\n})(ParserState || (ParserState = {}));\nvar Parser = (function () {\n    function Parser(_inputHandler, _terminal) {\n        this._inputHandler = _inputHandler;\n        this._terminal = _terminal;\n        this._state = ParserState.NORMAL;\n    }\n    Parser.prototype.parse = function (data) {\n        var l = data.length, j, cs, ch, code, low;\n        this._position = 0;\n        if (this._terminal.surrogate_high) {\n            data = this._terminal.surrogate_high + data;\n            this._terminal.surrogate_high = '';\n        }\n        for (; this._position < l; this._position++) {\n            ch = data[this._position];\n            code = data.charCodeAt(this._position);\n            if (0xD800 <= code && code <= 0xDBFF) {\n                low = data.charCodeAt(this._position + 1);\n                if (isNaN(low)) {\n                    this._terminal.surrogate_high = ch;\n                    continue;\n                }\n                code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n                ch += data.charAt(this._position + 1);\n            }\n            if (0xDC00 <= code && code <= 0xDFFF)\n                continue;\n            switch (this._state) {\n                case ParserState.NORMAL:\n                    if (ch in normalStateHandler) {\n                        normalStateHandler[ch](this, this._inputHandler);\n                    }\n                    else {\n                        this._inputHandler.addChar(ch, code);\n                    }\n                    break;\n                case ParserState.ESCAPED:\n                    if (ch in escapedStateHandler) {\n                        escapedStateHandler[ch](this, this._terminal);\n                        break;\n                    }\n                    switch (ch) {\n                        case '(':\n                        case ')':\n                        case '*':\n                        case '+':\n                        case '-':\n                        case '.':\n                            switch (ch) {\n                                case '(':\n                                    this._terminal.gcharset = 0;\n                                    break;\n                                case ')':\n                                    this._terminal.gcharset = 1;\n                                    break;\n                                case '*':\n                                    this._terminal.gcharset = 2;\n                                    break;\n                                case '+':\n                                    this._terminal.gcharset = 3;\n                                    break;\n                                case '-':\n                                    this._terminal.gcharset = 1;\n                                    break;\n                                case '.':\n                                    this._terminal.gcharset = 2;\n                                    break;\n                            }\n                            this._state = ParserState.CHARSET;\n                            break;\n                        case '/':\n                            this._terminal.gcharset = 3;\n                            this._state = ParserState.CHARSET;\n                            this._position--;\n                            break;\n                        case 'N':\n                            break;\n                        case 'O':\n                            break;\n                        case 'n':\n                            this._terminal.setgLevel(2);\n                            break;\n                        case 'o':\n                            this._terminal.setgLevel(3);\n                            break;\n                        case '|':\n                            this._terminal.setgLevel(3);\n                            break;\n                        case '}':\n                            this._terminal.setgLevel(2);\n                            break;\n                        case '~':\n                            this._terminal.setgLevel(1);\n                            break;\n                        case '7':\n                            this._inputHandler.saveCursor();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '8':\n                            this._inputHandler.restoreCursor();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '#':\n                            this._state = ParserState.NORMAL;\n                            this._position++;\n                            break;\n                        case 'H':\n                            this._terminal.tabSet();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '=':\n                            this._terminal.log('Serial port requested application keypad.');\n                            this._terminal.applicationKeypad = true;\n                            this._terminal.viewport.syncScrollArea();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '>':\n                            this._terminal.log('Switching back to normal keypad.');\n                            this._terminal.applicationKeypad = false;\n                            this._terminal.viewport.syncScrollArea();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        default:\n                            this._state = ParserState.NORMAL;\n                            this._terminal.error('Unknown ESC control: %s.', ch);\n                            break;\n                    }\n                    break;\n                case ParserState.CHARSET:\n                    if (ch in Charsets_1.CHARSETS) {\n                        cs = Charsets_1.CHARSETS[ch];\n                        if (ch === '/') {\n                            this.skipNextChar();\n                        }\n                    }\n                    else {\n                        cs = Charsets_1.DEFAULT_CHARSET;\n                    }\n                    this._terminal.setgCharset(this._terminal.gcharset, cs);\n                    this._terminal.gcharset = null;\n                    this._state = ParserState.NORMAL;\n                    break;\n                case ParserState.OSC:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        this._terminal.params.push(this._terminal.currentParam);\n                        switch (this._terminal.params[0]) {\n                            case 0:\n                            case 1:\n                            case 2:\n                                if (this._terminal.params[1]) {\n                                    this._terminal.title = this._terminal.params[1];\n                                    this._terminal.handleTitle(this._terminal.title);\n                                }\n                                break;\n                            case 3:\n                                break;\n                            case 4:\n                            case 5:\n                                break;\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                                break;\n                            case 46:\n                                break;\n                            case 50:\n                                break;\n                            case 51:\n                                break;\n                            case 52:\n                                break;\n                            case 104:\n                            case 105:\n                            case 110:\n                            case 111:\n                            case 112:\n                            case 113:\n                            case 114:\n                            case 115:\n                            case 116:\n                            case 117:\n                            case 118:\n                                break;\n                        }\n                        this._terminal.params = [];\n                        this._terminal.currentParam = 0;\n                        this._state = ParserState.NORMAL;\n                    }\n                    else {\n                        if (!this._terminal.params.length) {\n                            if (ch >= '0' && ch <= '9') {\n                                this._terminal.currentParam =\n                                    this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n                            }\n                            else if (ch === ';') {\n                                this._terminal.params.push(this._terminal.currentParam);\n                                this._terminal.currentParam = '';\n                            }\n                        }\n                        else {\n                            this._terminal.currentParam += ch;\n                        }\n                    }\n                    break;\n                case ParserState.CSI_PARAM:\n                    if (ch in csiParamStateHandler) {\n                        csiParamStateHandler[ch](this);\n                        break;\n                    }\n                    this.finalizeParam();\n                    this._state = ParserState.CSI;\n                case ParserState.CSI:\n                    if (ch in csiStateHandler) {\n                        csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n                    }\n                    else {\n                        this._terminal.error('Unknown CSI code: %s.', ch);\n                    }\n                    this._state = ParserState.NORMAL;\n                    this._terminal.prefix = '';\n                    this._terminal.postfix = '';\n                    break;\n                case ParserState.DCS:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        switch (this._terminal.prefix) {\n                            case '':\n                                break;\n                            case '$q':\n                                var pt = this._terminal.currentParam, valid = false;\n                                switch (pt) {\n                                    case '\"q':\n                                        pt = '0\"q';\n                                        break;\n                                    case '\"p':\n                                        pt = '61\"p';\n                                        break;\n                                    case 'r':\n                                        pt = ''\n                                            + (this._terminal.scrollTop + 1)\n                                            + ';'\n                                            + (this._terminal.scrollBottom + 1)\n                                            + 'r';\n                                        break;\n                                    case 'm':\n                                        pt = '0m';\n                                        break;\n                                    default:\n                                        this._terminal.error('Unknown DCS Pt: %s.', pt);\n                                        pt = '';\n                                        break;\n                                }\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '$r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n                                break;\n                            case '+p':\n                                break;\n                            case '+q':\n                                pt = this._terminal.currentParam\n                                    , valid = false;\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '+r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n                                break;\n                            default:\n                                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n                                break;\n                        }\n                        this._terminal.currentParam = 0;\n                        this._terminal.prefix = '';\n                        this._state = ParserState.NORMAL;\n                    }\n                    else if (!this._terminal.currentParam) {\n                        if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n                            this._terminal.currentParam = ch;\n                        }\n                        else if (this._terminal.prefix.length === 2) {\n                            this._terminal.currentParam = ch;\n                        }\n                        else {\n                            this._terminal.prefix += ch;\n                        }\n                    }\n                    else {\n                        this._terminal.currentParam += ch;\n                    }\n                    break;\n                case ParserState.IGNORE:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        this._state = ParserState.NORMAL;\n                    }\n                    break;\n            }\n        }\n    };\n    Parser.prototype.setState = function (state) {\n        this._state = state;\n    };\n    Parser.prototype.setPrefix = function (prefix) {\n        this._terminal.prefix = prefix;\n    };\n    Parser.prototype.setPostfix = function (postfix) {\n        this._terminal.postfix = postfix;\n    };\n    Parser.prototype.setParam = function (param) {\n        this._terminal.currentParam = param;\n    };\n    Parser.prototype.getParam = function () {\n        return this._terminal.currentParam;\n    };\n    Parser.prototype.finalizeParam = function () {\n        this._terminal.params.push(this._terminal.currentParam);\n        this._terminal.currentParam = 0;\n    };\n    Parser.prototype.skipNextChar = function () {\n        this._position++;\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n\n//# sourceMappingURL=Parser.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Renderer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MAX_REFRESH_FRAME_SKIP = 5;\nvar FLAGS;\n(function (FLAGS) {\n    FLAGS[FLAGS[\"BOLD\"] = 1] = \"BOLD\";\n    FLAGS[FLAGS[\"UNDERLINE\"] = 2] = \"UNDERLINE\";\n    FLAGS[FLAGS[\"BLINK\"] = 4] = \"BLINK\";\n    FLAGS[FLAGS[\"INVERSE\"] = 8] = \"INVERSE\";\n    FLAGS[FLAGS[\"INVISIBLE\"] = 16] = \"INVISIBLE\";\n})(FLAGS || (FLAGS = {}));\n;\nvar brokenBold = null;\nvar Renderer = (function () {\n    function Renderer(_terminal) {\n        this._terminal = _terminal;\n        this._refreshRowsQueue = [];\n        this._refreshFramesSkipped = 0;\n        this._refreshAnimationFrame = null;\n        if (brokenBold === null) {\n            brokenBold = checkBoldBroken(this._terminal.element);\n        }\n    }\n    Renderer.prototype.queueRefresh = function (start, end) {\n        this._refreshRowsQueue.push({ start: start, end: end });\n        if (!this._refreshAnimationFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n        }\n    };\n    Renderer.prototype._refreshLoop = function () {\n        var skipFrame = this._terminal.writeBuffer.length > 0 && this._refreshFramesSkipped++ <= MAX_REFRESH_FRAME_SKIP;\n        if (skipFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n            return;\n        }\n        this._refreshFramesSkipped = 0;\n        var start;\n        var end;\n        if (this._refreshRowsQueue.length > 4) {\n            start = 0;\n            end = this._terminal.rows - 1;\n        }\n        else {\n            start = this._refreshRowsQueue[0].start;\n            end = this._refreshRowsQueue[0].end;\n            for (var i = 1; i < this._refreshRowsQueue.length; i++) {\n                if (this._refreshRowsQueue[i].start < start) {\n                    start = this._refreshRowsQueue[i].start;\n                }\n                if (this._refreshRowsQueue[i].end > end) {\n                    end = this._refreshRowsQueue[i].end;\n                }\n            }\n        }\n        this._refreshRowsQueue = [];\n        this._refreshAnimationFrame = null;\n        this._refresh(start, end);\n    };\n    Renderer.prototype._refresh = function (start, end) {\n        var x, y, i, line, out, ch, ch_width, width, data, attr, bg, fg, flags, row, parent, focused = document.activeElement;\n        if (end - start >= this._terminal.rows / 2) {\n            parent = this._terminal.element.parentNode;\n            if (parent) {\n                this._terminal.element.removeChild(this._terminal.rowContainer);\n            }\n        }\n        width = this._terminal.cols;\n        y = start;\n        if (end >= this._terminal.rows) {\n            this._terminal.log('`end` is too large. Most likely a bad CSR.');\n            end = this._terminal.rows - 1;\n        }\n        for (; y <= end; y++) {\n            row = y + this._terminal.ydisp;\n            line = this._terminal.lines.get(row);\n            if (!line || !this._terminal.children[y]) {\n                continue;\n            }\n            out = '';\n            if (this._terminal.y === y - (this._terminal.ybase - this._terminal.ydisp)\n                && this._terminal.cursorState\n                && !this._terminal.cursorHidden) {\n                x = this._terminal.x;\n            }\n            else {\n                x = -1;\n            }\n            attr = this._terminal.defAttr;\n            i = 0;\n            for (; i < width; i++) {\n                if (!line[i]) {\n                    continue;\n                }\n                data = line[i][0];\n                ch = line[i][1];\n                ch_width = line[i][2];\n                if (!ch_width)\n                    continue;\n                if (i === x)\n                    data = -1;\n                if (data !== attr) {\n                    if (attr !== this._terminal.defAttr) {\n                        out += '</span>';\n                    }\n                    if (data !== this._terminal.defAttr) {\n                        if (data === -1) {\n                            out += '<span class=\"reverse-video terminal-cursor\">';\n                        }\n                        else {\n                            var classNames = [];\n                            bg = data & 0x1ff;\n                            fg = (data >> 9) & 0x1ff;\n                            flags = data >> 18;\n                            if (flags & FLAGS.BOLD) {\n                                if (!brokenBold) {\n                                    classNames.push('xterm-bold');\n                                }\n                                if (fg < 8)\n                                    fg += 8;\n                            }\n                            if (flags & FLAGS.UNDERLINE) {\n                                classNames.push('xterm-underline');\n                            }\n                            if (flags & FLAGS.BLINK) {\n                                classNames.push('xterm-blink');\n                            }\n                            if (flags & FLAGS.INVERSE) {\n                                bg = [fg, fg = bg][0];\n                                if ((flags & 1) && fg < 8)\n                                    fg += 8;\n                            }\n                            if (flags & FLAGS.INVISIBLE) {\n                                classNames.push('xterm-hidden');\n                            }\n                            if (flags & FLAGS.INVERSE) {\n                                if (bg === 257) {\n                                    bg = 15;\n                                }\n                                if (fg === 256) {\n                                    fg = 0;\n                                }\n                            }\n                            if (bg < 256) {\n                                classNames.push('xterm-bg-color-' + bg);\n                            }\n                            if (fg < 256) {\n                                classNames.push('xterm-color-' + fg);\n                            }\n                            out += '<span';\n                            if (classNames.length) {\n                                out += ' class=\"' + classNames.join(' ') + '\"';\n                            }\n                            out += '>';\n                        }\n                    }\n                }\n                if (ch_width === 2) {\n                    out += '<span class=\"xterm-wide-char\">';\n                }\n                switch (ch) {\n                    case '&':\n                        out += '&amp;';\n                        break;\n                    case '<':\n                        out += '&lt;';\n                        break;\n                    case '>':\n                        out += '&gt;';\n                        break;\n                    default:\n                        if (ch <= ' ') {\n                            out += '&nbsp;';\n                        }\n                        else {\n                            out += ch;\n                        }\n                        break;\n                }\n                if (ch_width === 2) {\n                    out += '</span>';\n                }\n                attr = data;\n            }\n            if (attr !== this._terminal.defAttr) {\n                out += '</span>';\n            }\n            this._terminal.children[y].innerHTML = out;\n        }\n        if (parent) {\n            this._terminal.element.appendChild(this._terminal.rowContainer);\n        }\n        this._terminal.emit('refresh', { element: this._terminal.element, start: start, end: end });\n    };\n    ;\n    return Renderer;\n}());\nexports.Renderer = Renderer;\nfunction checkBoldBroken(terminal) {\n    var document = terminal.ownerDocument;\n    var el = document.createElement('span');\n    el.innerHTML = 'hello world';\n    terminal.appendChild(el);\n    var w1 = el.offsetWidth;\n    var h1 = el.offsetHeight;\n    el.style.fontWeight = 'bold';\n    var w2 = el.offsetWidth;\n    var h2 = el.offsetHeight;\n    terminal.removeChild(el);\n    return w1 !== w2 || h1 !== h2;\n}\n\n//# sourceMappingURL=Renderer.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Linkifier.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INVALID_LINK_CLASS = 'xterm-invalid-link';\nvar protocolClause = '(https?:\\\\/\\\\/)';\nvar domainCharacterSet = '[\\\\da-z\\\\.-]+';\nvar negatedDomainCharacterSet = '[^\\\\da-z\\\\.-]+';\nvar domainBodyClause = '(' + domainCharacterSet + ')';\nvar tldClause = '([a-z\\\\.]{2,6})';\nvar ipClause = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})';\nvar localHostClause = '(localhost)';\nvar portClause = '(:\\\\d{1,5})';\nvar hostClause = '((' + domainBodyClause + '\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\nvar pathClause = '(\\\\/[\\\\/\\\\w\\\\.\\\\-%~]*)*';\nvar queryStringHashFragmentCharacterSet = '[0-9\\\\w\\\\[\\\\]\\\\(\\\\)\\\\/\\\\?\\\\!#@$%&\\'*+,:;~\\\\=\\\\.\\\\-]*';\nvar queryStringClause = '(\\\\?' + queryStringHashFragmentCharacterSet + ')?';\nvar hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\nvar negatedPathCharacterSet = '[^\\\\/\\\\w\\\\.\\\\-%]+';\nvar bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\nvar start = '(?:^|' + negatedDomainCharacterSet + ')(';\nvar end = ')($|' + negatedPathCharacterSet + ')';\nvar strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\nvar HYPERTEXT_LINK_MATCHER_ID = 0;\nvar Linkifier = (function () {\n    function Linkifier() {\n        this._nextLinkMatcherId = HYPERTEXT_LINK_MATCHER_ID;\n        this._rowTimeoutIds = [];\n        this._linkMatchers = [];\n        this.registerLinkMatcher(strictUrlRegex, null, { matchIndex: 1 });\n    }\n    Linkifier.prototype.attachToDom = function (document, rows) {\n        this._document = document;\n        this._rows = rows;\n    };\n    Linkifier.prototype.linkifyRow = function (rowIndex) {\n        if (!this._document) {\n            return;\n        }\n        var timeoutId = this._rowTimeoutIds[rowIndex];\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        this._rowTimeoutIds[rowIndex] = setTimeout(this._linkifyRow.bind(this, rowIndex), Linkifier.TIME_BEFORE_LINKIFY);\n    };\n    Linkifier.prototype.setHypertextLinkHandler = function (handler) {\n        this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].handler = handler;\n    };\n    Linkifier.prototype.setHypertextValidationCallback = function (callback) {\n        this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].validationCallback = callback;\n    };\n    Linkifier.prototype.registerLinkMatcher = function (regex, handler, options) {\n        if (options === void 0) { options = {}; }\n        if (this._nextLinkMatcherId !== HYPERTEXT_LINK_MATCHER_ID && !handler) {\n            throw new Error('handler must be defined');\n        }\n        var matcher = {\n            id: this._nextLinkMatcherId++,\n            regex: regex,\n            handler: handler,\n            matchIndex: options.matchIndex,\n            validationCallback: options.validationCallback,\n            priority: options.priority || 0\n        };\n        this._addLinkMatcherToList(matcher);\n        return matcher.id;\n    };\n    Linkifier.prototype._addLinkMatcherToList = function (matcher) {\n        if (this._linkMatchers.length === 0) {\n            this._linkMatchers.push(matcher);\n            return;\n        }\n        for (var i = this._linkMatchers.length - 1; i >= 0; i--) {\n            if (matcher.priority <= this._linkMatchers[i].priority) {\n                this._linkMatchers.splice(i + 1, 0, matcher);\n                return;\n            }\n        }\n        this._linkMatchers.splice(0, 0, matcher);\n    };\n    Linkifier.prototype.deregisterLinkMatcher = function (matcherId) {\n        for (var i = 1; i < this._linkMatchers.length; i++) {\n            if (this._linkMatchers[i].id === matcherId) {\n                this._linkMatchers.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    Linkifier.prototype._linkifyRow = function (rowIndex) {\n        var row = this._rows[rowIndex];\n        if (!row) {\n            return;\n        }\n        var text = row.textContent;\n        for (var i = 0; i < this._linkMatchers.length; i++) {\n            var matcher = this._linkMatchers[i];\n            var linkElements = this._doLinkifyRow(row, matcher);\n            if (linkElements.length > 0) {\n                if (matcher.validationCallback) {\n                    var _loop_1 = function (j) {\n                        var element = linkElements[j];\n                        matcher.validationCallback(element.textContent, element, function (isValid) {\n                            if (!isValid) {\n                                element.classList.add(INVALID_LINK_CLASS);\n                            }\n                        });\n                    };\n                    for (var j = 0; j < linkElements.length; j++) {\n                        _loop_1(j);\n                    }\n                }\n                return;\n            }\n        }\n    };\n    Linkifier.prototype._doLinkifyRow = function (row, matcher) {\n        var result = [];\n        var isHttpLinkMatcher = matcher.id === HYPERTEXT_LINK_MATCHER_ID;\n        var nodes = row.childNodes;\n        var match = row.textContent.match(matcher.regex);\n        if (!match || match.length === 0) {\n            return result;\n        }\n        var uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n        var rowStartIndex = match.index + uri.length;\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            var searchIndex = node.textContent.indexOf(uri);\n            if (searchIndex >= 0) {\n                var linkElement = this._createAnchorElement(uri, matcher.handler, isHttpLinkMatcher);\n                if (node.textContent.length === uri.length) {\n                    if (node.nodeType === 3) {\n                        this._replaceNode(node, linkElement);\n                    }\n                    else {\n                        var element = node;\n                        if (element.nodeName === 'A') {\n                            return result;\n                        }\n                        element.innerHTML = '';\n                        element.appendChild(linkElement);\n                    }\n                }\n                else {\n                    var nodesAdded = this._replaceNodeSubstringWithNode(node, linkElement, uri, searchIndex);\n                    i += nodesAdded;\n                }\n                result.push(linkElement);\n                match = row.textContent.substring(rowStartIndex).match(matcher.regex);\n                if (!match || match.length === 0) {\n                    return result;\n                }\n                uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n                rowStartIndex += match.index + uri.length;\n            }\n        }\n        return result;\n    };\n    Linkifier.prototype._createAnchorElement = function (uri, handler, isHypertextLinkHandler) {\n        var element = this._document.createElement('a');\n        element.textContent = uri;\n        element.draggable = false;\n        if (isHypertextLinkHandler) {\n            element.href = uri;\n            element.target = '_blank';\n            element.addEventListener('click', function (event) {\n                if (handler) {\n                    return handler(event, uri);\n                }\n            });\n        }\n        else {\n            element.addEventListener('click', function (event) {\n                if (element.classList.contains(INVALID_LINK_CLASS)) {\n                    return;\n                }\n                return handler(event, uri);\n            });\n        }\n        return element;\n    };\n    Linkifier.prototype._replaceNode = function (oldNode) {\n        var newNodes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            newNodes[_i - 1] = arguments[_i];\n        }\n        var parent = oldNode.parentNode;\n        for (var i = 0; i < newNodes.length; i++) {\n            parent.insertBefore(newNodes[i], oldNode);\n        }\n        parent.removeChild(oldNode);\n    };\n    Linkifier.prototype._replaceNodeSubstringWithNode = function (targetNode, newNode, substring, substringIndex) {\n        var node = targetNode;\n        if (node.nodeType !== 3) {\n            node = node.childNodes[0];\n        }\n        if (node.childNodes.length === 0 && node.nodeType !== 3) {\n            throw new Error('targetNode must be a text node or only contain a single text node');\n        }\n        var fullText = node.textContent;\n        if (substringIndex === 0) {\n            var rightText_1 = fullText.substring(substring.length);\n            var rightTextNode_1 = this._document.createTextNode(rightText_1);\n            this._replaceNode(node, newNode, rightTextNode_1);\n            return 0;\n        }\n        if (substringIndex === targetNode.textContent.length - substring.length) {\n            var leftText_1 = fullText.substring(0, substringIndex);\n            var leftTextNode_1 = this._document.createTextNode(leftText_1);\n            this._replaceNode(node, leftTextNode_1, newNode);\n            return 0;\n        }\n        var leftText = fullText.substring(0, substringIndex);\n        var leftTextNode = this._document.createTextNode(leftText);\n        var rightText = fullText.substring(substringIndex + substring.length);\n        var rightTextNode = this._document.createTextNode(rightText);\n        this._replaceNode(node, leftTextNode, newNode, rightTextNode);\n        return 1;\n    };\n    return Linkifier;\n}());\nLinkifier.TIME_BEFORE_LINKIFY = 200;\nexports.Linkifier = Linkifier;\n\n//# sourceMappingURL=Linkifier.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/utils/CharMeasure.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter_js_1 = require(\"../EventEmitter.js\");\nvar CharMeasure = (function (_super) {\n    __extends(CharMeasure, _super);\n    function CharMeasure(document, parentElement) {\n        var _this = _super.call(this) || this;\n        _this._document = document;\n        _this._parentElement = parentElement;\n        return _this;\n    }\n    Object.defineProperty(CharMeasure.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CharMeasure.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CharMeasure.prototype.measure = function () {\n        var _this = this;\n        if (!this._measureElement) {\n            this._measureElement = this._document.createElement('span');\n            this._measureElement.style.position = 'absolute';\n            this._measureElement.style.top = '0';\n            this._measureElement.style.left = '-9999em';\n            this._measureElement.textContent = 'W';\n            this._measureElement.setAttribute('aria-hidden', 'true');\n            this._parentElement.appendChild(this._measureElement);\n            setTimeout(function () { return _this._doMeasure(); }, 0);\n        }\n        else {\n            this._doMeasure();\n        }\n    };\n    CharMeasure.prototype._doMeasure = function () {\n        var geometry = this._measureElement.getBoundingClientRect();\n        if (geometry.width === 0 || geometry.height === 0) {\n            return;\n        }\n        if (this._width !== geometry.width || this._height !== geometry.height) {\n            this._width = geometry.width;\n            this._height = geometry.height;\n            this.emit('charsizechanged');\n        }\n    };\n    return CharMeasure;\n}(EventEmitter_js_1.EventEmitter));\nexports.CharMeasure = CharMeasure;\n\n//# sourceMappingURL=CharMeasure.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/utils/Browser.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Generic_1 = require(\"./Generic\");\nvar isNode = (typeof navigator === 'undefined') ? true : false;\nvar userAgent = (isNode) ? 'node' : navigator.userAgent;\nvar platform = (isNode) ? 'node' : navigator.platform;\nexports.isFirefox = !!~userAgent.indexOf('Firefox');\nexports.isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\nexports.isMac = Generic_1.contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\nexports.isIpad = platform === 'iPad';\nexports.isIphone = platform === 'iPhone';\nexports.isMSWindows = Generic_1.contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\n\n//# sourceMappingURL=Browser.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/utils/Generic.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction contains(arr, el) {\n    return arr.indexOf(el) >= 0;\n}\nexports.contains = contains;\n;\n\n//# sourceMappingURL=Generic.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/gulpfile.js":"const browserify = require('browserify');\nconst buffer = require('vinyl-buffer');\nconst coveralls = require('gulp-coveralls');\nconst fs = require('fs-extra');\nconst gulp = require('gulp');\nconst istanbul = require('gulp-istanbul');\nconst merge = require('merge-stream');\nconst mocha = require('gulp-mocha');\nconst sorcery = require('sorcery');\nconst source = require('vinyl-source-stream');\nconst sourcemaps = require('gulp-sourcemaps');\nconst ts = require('gulp-typescript');\n\n\nlet buildDir = process.env.BUILD_DIR || 'build';\nlet tsProject = ts.createProject('tsconfig.json');\nlet srcDir = tsProject.config.compilerOptions.rootDir;\nlet outDir = tsProject.config.compilerOptions.outDir;\n\n/**\n * Compile TypeScript sources to JavaScript files and create a source map file for each TypeScript\n * file compiled.\n */\ngulp.task('tsc', function () {\n  // Remove the ${outDir}/ directory to prevent confusion if files were deleted in ${srcDir}/\n  fs.emptyDirSync(`${outDir}`);\n\n  // Build all TypeScript files (including tests) to ${outDir}/, based on the configuration defined in\n  // `tsconfig.json`.\n  let tsResult = tsProject.src().pipe(sourcemaps.init()).pipe(tsProject());\n  let tsc = tsResult.js.pipe(sourcemaps.write('.', {includeContent: false, sourceRoot: ''})).pipe(gulp.dest(outDir));\n\n  // Copy all addons from ${srcDir}/ to ${outDir}/\n  let copyAddons = gulp.src(`${srcDir}/addons/**/*`).pipe(gulp.dest(`${outDir}/addons`));\n\n  // Copy stylesheets from ${srcDir}/ to ${outDir}/\n  let copyStylesheets = gulp.src(`${srcDir}/**/*.css`).pipe(gulp.dest(outDir));\n\n  return merge(tsc, copyAddons, copyStylesheets);\n});\n\n/**\n * Bundle JavaScript files produced by the `tsc` task, into a single file named `xterm.js` with\n * Browserify.\n */\ngulp.task('browserify', ['tsc'], function() {\n  // Ensure that the build directory exists\n  fs.ensureDirSync(buildDir);\n\n  let browserifyOptions = {\n    basedir: buildDir,\n    debug: true,\n    entries: [`../${outDir}/xterm.js`],\n    standalone: 'Terminal',\n    cache: {},\n    packageCache: {}\n  };\n  let bundleStream = browserify(browserifyOptions)\n        .bundle()\n        .pipe(source('xterm.js'))\n        .pipe(buffer())\n        .pipe(sourcemaps.init({loadMaps: true, sourceRoot: '..'}))\n        .pipe(sourcemaps.write('./'))\n        .pipe(gulp.dest(buildDir));\n\n  // Copy all add-ons from ${outDir}/ to buildDir\n  let copyAddons = gulp.src(`${outDir}/addons/**/*`).pipe(gulp.dest(`${buildDir}/addons`));\n\n  // Copy stylesheets from ${outDir}/ to ${buildDir}/\n  let copyStylesheets = gulp.src(`${outDir}/**/*.css`).pipe(gulp.dest(buildDir));\n\n  return merge(bundleStream, copyAddons, copyStylesheets);\n});\n\ngulp.task('instrument-test', function () {\n  return gulp.src([`${outDir}/**/*.js`])\n    // Covering files\n    .pipe(istanbul())\n    // Force `require` to return covered files\n    .pipe(istanbul.hookRequire());\n});\n\ngulp.task('mocha', ['instrument-test'], function () {\n  return gulp.src([`${outDir}/*test.js`, `${outDir}/**/*test.js`], {read: false})\n      .pipe(mocha())\n      .pipe(istanbul.writeReports());\n});\n\n/**\n * Use `sorcery` to resolve the source map chain and point back to the TypeScript files.\n * (Without this task the source maps produced for the JavaScript bundle points into the\n * compiled JavaScript files in ${outDir}/).\n */\ngulp.task('sorcery', ['browserify'], function () {\n  var chain = sorcery.loadSync(`${buildDir}/xterm.js`);\n  chain.apply();\n  chain.writeSync();\n});\n\n/**\n * Submit coverage results to coveralls.io\n */\ngulp.task('coveralls', function () {\n  gulp.src('coverage/**/lcov.info')\n    .pipe(coveralls());\n});\n\ngulp.task('build', ['sorcery']);\ngulp.task('test', ['mocha']);\ngulp.task('default', ['build']);\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Interfaces.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=Interfaces.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/Types.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=Types.js.map\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/src/xterm.js":"/**\n * xterm.js: xterm, in the browser\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n * @license MIT\n */\n\nimport { CompositionHelper } from './CompositionHelper';\nimport { EventEmitter } from './EventEmitter';\nimport { Viewport } from './Viewport';\nimport { rightClickHandler, pasteHandler, copyHandler } from './handlers/Clipboard';\nimport { CircularList } from './utils/CircularList';\nimport { C0 } from './EscapeSequences';\nimport { InputHandler } from './InputHandler';\nimport { Parser } from './Parser';\nimport { Renderer } from './Renderer';\nimport { Linkifier } from './Linkifier';\nimport { CharMeasure } from './utils/CharMeasure';\nimport * as Browser from './utils/Browser';\nimport * as Keyboard from './utils/Keyboard';\nimport { CHARSETS } from './Charsets';\n\n/**\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\n// Let it work inside Node.js for automated testing purposes.\nvar document = (typeof window != 'undefined') ? window.document : null;\n\n/**\n * The amount of write requests to queue before sending an XOFF signal to the\n * pty process. This number must be small in order for ^C and similar sequences\n * to be responsive.\n */\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\n\n/**\n * The number of writes to perform in a single batch before allowing the\n * renderer to catch up with a 0ms setTimeout.\n */\nvar WRITE_BATCH_SIZE = 300;\n\n/**\n * The time between cursor blinks. This is driven by JS rather than a CSS\n * animation due to a bug in Chromium that causes it to use excessive CPU time.\n * See https://github.com/Microsoft/vscode/issues/22900\n */\nvar CURSOR_BLINK_INTERVAL = 600;\n\n/**\n * Terminal\n */\n\n/**\n * Creates a new `Terminal` object.\n *\n * @param {object} options An object containing a set of options, the available options are:\n *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n *   - `cols` (number): The number of columns of the terminal (horizontal size)\n *   - `rows` (number): The number of rows of the terminal (vertical size)\n *\n * @public\n * @class Xterm Xterm\n * @alias module:xterm/src/xterm\n */\nfunction Terminal(options) {\n  var self = this;\n\n  if (!(this instanceof Terminal)) {\n    return new Terminal(arguments[0], arguments[1], arguments[2]);\n  }\n\n  self.browser = Browser;\n  self.cancel = Terminal.cancel;\n\n  EventEmitter.call(this);\n\n  if (typeof options === 'number') {\n    options = {\n      cols: arguments[0],\n      rows: arguments[1],\n      handler: arguments[2]\n    };\n  }\n\n  options = options || {};\n\n\n  Object.keys(Terminal.defaults).forEach(function(key) {\n    if (options[key] == null) {\n      options[key] = Terminal.options[key];\n\n      if (Terminal[key] !== Terminal.defaults[key]) {\n        options[key] = Terminal[key];\n      }\n    }\n    self[key] = options[key];\n  });\n\n  if (options.colors.length === 8) {\n    options.colors = options.colors.concat(Terminal._colors.slice(8));\n  } else if (options.colors.length === 16) {\n    options.colors = options.colors.concat(Terminal._colors.slice(16));\n  } else if (options.colors.length === 10) {\n    options.colors = options.colors.slice(0, -2).concat(\n      Terminal._colors.slice(8, -2), options.colors.slice(-2));\n  } else if (options.colors.length === 18) {\n    options.colors = options.colors.concat(\n      Terminal._colors.slice(16, -2), options.colors.slice(-2));\n  }\n  this.colors = options.colors;\n\n  this.options = options;\n\n  // this.context = options.context || window;\n  // this.document = options.document || document;\n  this.parent = options.body || options.parent || (\n    document ? document.getElementsByTagName('body')[0] : null\n  );\n\n  this.cols = options.cols || options.geometry[0];\n  this.rows = options.rows || options.geometry[1];\n  this.geometry = [this.cols, this.rows];\n\n  if (options.handler) {\n    this.on('data', options.handler);\n  }\n\n  /**\n   * The scroll position of the y cursor, ie. ybase + y = the y position within the entire\n   * buffer\n   */\n  this.ybase = 0;\n\n  /**\n   * The scroll position of the viewport\n   */\n  this.ydisp = 0;\n\n  /**\n   * The cursor's x position after ybase\n   */\n  this.x = 0;\n\n  /**\n   * The cursor's y position after ybase\n   */\n  this.y = 0;\n\n  this.cursorState = 0;\n  this.cursorHidden = false;\n  this.convertEol;\n  this.queue = '';\n  this.scrollTop = 0;\n  this.scrollBottom = this.rows - 1;\n  this.customKeydownHandler = null;\n  this.cursorBlinkInterval = null;\n\n  // modes\n  this.applicationKeypad = false;\n  this.applicationCursor = false;\n  this.originMode = false;\n  this.insertMode = false;\n  this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\n  this.normal = null;\n\n  // charset\n  this.charset = null;\n  this.gcharset = null;\n  this.glevel = 0;\n  this.charsets = [null];\n\n  // mouse properties\n  this.decLocator;\n  this.x10Mouse;\n  this.vt200Mouse;\n  this.vt300Mouse;\n  this.normalMouse;\n  this.mouseEvents;\n  this.sendFocus;\n  this.utfMouse;\n  this.sgrMouse;\n  this.urxvtMouse;\n\n  // misc\n  this.element;\n  this.children;\n  this.refreshStart;\n  this.refreshEnd;\n  this.savedX;\n  this.savedY;\n  this.savedCols;\n\n  // stream\n  this.readable = true;\n  this.writable = true;\n\n  this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\n  this.curAttr = this.defAttr;\n\n  this.params = [];\n  this.currentParam = 0;\n  this.prefix = '';\n  this.postfix = '';\n\n  this.inputHandler = new InputHandler(this);\n  this.parser = new Parser(this.inputHandler, this);\n  // Reuse renderer if the Terminal is being recreated via a Terminal.reset call.\n  this.renderer = this.renderer || null;\n  this.linkifier = this.linkifier || new Linkifier();\n\n  // user input states\n  this.writeBuffer = [];\n  this.writeInProgress = false;\n\n  /**\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\n   * This is a distinct state from writeStopped so that if the user requested\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\n   * below threshold.\n   */\n  this.xoffSentToCatchUp = false;\n\n  /** Whether writing has been stopped as a result of XOFF */\n  this.writeStopped = false;\n\n  // leftover surrogate high from previous write invocation\n  this.surrogate_high = '';\n\n  /**\n   * An array of all lines in the entire buffer, including the prompt. The lines are array of\n   * characters which are 2-length arrays where [0] is an attribute and [1] is the character.\n   */\n  this.lines = new CircularList(this.scrollback);\n  var i = this.rows;\n  while (i--) {\n    this.lines.push(this.blankLine());\n  }\n\n  this.tabs;\n  this.setupStops();\n\n  // Store if user went browsing history in scrollback\n  this.userScrolling = false;\n}\n\ninherits(Terminal, EventEmitter);\n\n/**\n * back_color_erase feature for xterm.\n */\nTerminal.prototype.eraseAttr = function() {\n  // if (this.is('screen')) return this.defAttr;\n  return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\n};\n\n/**\n * Colors\n */\n\n// Colors 0-15\nTerminal.tangoColors = [\n  // dark:\n  '#2e3436',\n  '#cc0000',\n  '#4e9a06',\n  '#c4a000',\n  '#3465a4',\n  '#75507b',\n  '#06989a',\n  '#d3d7cf',\n  // bright:\n  '#555753',\n  '#ef2929',\n  '#8ae234',\n  '#fce94f',\n  '#729fcf',\n  '#ad7fa8',\n  '#34e2e2',\n  '#eeeeec'\n];\n\n// Colors 0-15 + 16-255\n// Much thanks to TooTallNate for writing this.\nTerminal.colors = (function() {\n  var colors = Terminal.tangoColors.slice()\n  , r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff]\n  , i;\n\n  // 16-231\n  i = 0;\n  for (; i < 216; i++) {\n    out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);\n  }\n\n  // 232-255 (grey)\n  i = 0;\n  for (; i < 24; i++) {\n    r = 8 + i * 10;\n    out(r, r, r);\n  }\n\n  function out(r, g, b) {\n    colors.push('#' + hex(r) + hex(g) + hex(b));\n  }\n\n  function hex(c) {\n    c = c.toString(16);\n    return c.length < 2 ? '0' + c : c;\n  }\n\n  return colors;\n})();\n\nTerminal._colors = Terminal.colors.slice();\n\nTerminal.vcolors = (function() {\n  var out = []\n  , colors = Terminal.colors\n  , i = 0\n  , color;\n\n  for (; i < 256; i++) {\n    color = parseInt(colors[i].substring(1), 16);\n    out.push([\n      (color >> 16) & 0xff,\n      (color >> 8) & 0xff,\n      color & 0xff\n    ]);\n  }\n\n  return out;\n})();\n\n/**\n * Options\n */\n\nTerminal.defaults = {\n  colors: Terminal.colors,\n  theme: 'default',\n  convertEol: false,\n  termName: 'xterm',\n  geometry: [80, 24],\n  cursorBlink: false,\n  cursorStyle: 'block',\n  visualBell: false,\n  popOnBell: false,\n  scrollback: 1000,\n  screenKeys: false,\n  debug: false,\n  cancelEvents: false,\n  disableStdin: false,\n  useFlowControl: false,\n  tabStopWidth: 8\n  // programFeatures: false,\n  // focusKeys: false,\n};\n\nTerminal.options = {};\n\nTerminal.focus = null;\n\neach(keys(Terminal.defaults), function(key) {\n  Terminal[key] = Terminal.defaults[key];\n  Terminal.options[key] = Terminal.defaults[key];\n});\n\n/**\n * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n */\nTerminal.prototype.focus = function() {\n  return this.textarea.focus();\n};\n\n/**\n * Retrieves an option's value from the terminal.\n * @param {string} key The option key.\n */\nTerminal.prototype.getOption = function(key, value) {\n  if (!(key in Terminal.defaults)) {\n    throw new Error('No option with key \"' + key + '\"');\n  }\n\n  if (typeof this.options[key] !== 'undefined') {\n    return this.options[key];\n  }\n\n  return this[key];\n};\n\n/**\n * Sets an option on the terminal.\n * @param {string} key The option key.\n * @param {string} value The option value.\n */\nTerminal.prototype.setOption = function(key, value) {\n  if (!(key in Terminal.defaults)) {\n    throw new Error('No option with key \"' + key + '\"');\n  }\n  switch (key) {\n    case 'scrollback':\n      if (this.options[key] !== value) {\n        if (this.lines.length > value) {\n          const amountToTrim = this.lines.length - value;\n          const needsRefresh = (this.ydisp - amountToTrim < 0);\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          if (needsRefresh) {\n            this.refresh(0, this.rows - 1);\n          }\n        }\n        this.lines.maxLength = value;\n        this.viewport.syncScrollArea();\n      }\n      break;\n  }\n  this[key] = value;\n  this.options[key] = value;\n  switch (key) {\n    case 'cursorBlink': this.setCursorBlinking(value); break;\n    case 'cursorStyle':\n      // Style 'block' applies with no class\n      this.element.classList.toggle(`xterm-cursor-style-underline`, value === 'underline');\n      this.element.classList.toggle(`xterm-cursor-style-bar`, value === 'bar');\n      break;\n    case 'tabStopWidth': this.setupStops(); break;\n  }\n};\n\nTerminal.prototype.restartCursorBlinking = function () {\n  this.setCursorBlinking(this.options.cursorBlink);\n};\n\nTerminal.prototype.setCursorBlinking = function (enabled) {\n  this.element.classList.toggle('xterm-cursor-blink', enabled);\n  this.clearCursorBlinkingInterval();\n  if (enabled) {\n    var self = this;\n    this.cursorBlinkInterval = setInterval(function () {\n      self.element.classList.toggle('xterm-cursor-blink-on');\n    }, CURSOR_BLINK_INTERVAL);\n  }\n};\n\nTerminal.prototype.clearCursorBlinkingInterval = function () {\n  this.element.classList.remove('xterm-cursor-blink-on');\n  if (this.cursorBlinkInterval) {\n    clearInterval(this.cursorBlinkInterval);\n    this.cursorBlinkInterval = null;\n  }\n};\n\n/**\n * Binds the desired focus behavior on a given terminal object.\n *\n * @static\n */\nTerminal.bindFocus = function (term) {\n  on(term.textarea, 'focus', function (ev) {\n    if (term.sendFocus) {\n      term.send(C0.ESC + '[I');\n    }\n    term.element.classList.add('focus');\n    term.showCursor();\n    term.restartCursorBlinking.apply(term);\n    Terminal.focus = term;\n    term.emit('focus', {terminal: term});\n  });\n};\n\n/**\n * Blur the terminal. Delegates blur handling to the terminal's DOM element.\n */\nTerminal.prototype.blur = function() {\n  return this.textarea.blur();\n};\n\n/**\n * Binds the desired blur behavior on a given terminal object.\n *\n * @static\n */\nTerminal.bindBlur = function (term) {\n  on(term.textarea, 'blur', function (ev) {\n    term.refresh(term.y, term.y);\n    if (term.sendFocus) {\n      term.send(C0.ESC + '[O');\n    }\n    term.element.classList.remove('focus');\n    term.clearCursorBlinkingInterval.apply(term);\n    Terminal.focus = null;\n    term.emit('blur', {terminal: term});\n  });\n};\n\n/**\n * Initialize default behavior\n */\nTerminal.prototype.initGlobal = function() {\n  var term = this;\n\n  Terminal.bindKeys(this);\n  Terminal.bindFocus(this);\n  Terminal.bindBlur(this);\n\n  // Bind clipboard functionality\n  on(this.element, 'copy', function (ev) {\n    copyHandler.call(this, ev, term);\n  });\n  on(this.textarea, 'paste', function (ev) {\n    pasteHandler.call(this, ev, term);\n  });\n  on(this.element, 'paste', function (ev) {\n    pasteHandler.call(this, ev, term);\n  });\n\n  function rightClickHandlerWrapper (ev) {\n    rightClickHandler.call(this, ev, term);\n  }\n\n  if (term.browser.isFirefox) {\n    on(this.element, 'mousedown', function (ev) {\n      if (ev.button == 2) {\n        rightClickHandlerWrapper(ev);\n      }\n    });\n  } else {\n    on(this.element, 'contextmenu', rightClickHandlerWrapper);\n  }\n};\n\n/**\n * Apply key handling to the terminal\n */\nTerminal.bindKeys = function(term) {\n  on(term.element, 'keydown', function(ev) {\n    if (document.activeElement != this) {\n      return;\n    }\n    term.keyDown(ev);\n  }, true);\n\n  on(term.element, 'keypress', function(ev) {\n    if (document.activeElement != this) {\n      return;\n    }\n    term.keyPress(ev);\n  }, true);\n\n  on(term.element, 'keyup', function(ev) {\n    if (!wasMondifierKeyOnlyEvent(ev)) {\n      term.focus(term);\n    }\n  }, true);\n\n  on(term.textarea, 'keydown', function(ev) {\n    term.keyDown(ev);\n  }, true);\n\n  on(term.textarea, 'keypress', function(ev) {\n    term.keyPress(ev);\n    // Truncate the textarea's value, since it is not needed\n    this.value = '';\n  }, true);\n\n  on(term.textarea, 'compositionstart', term.compositionHelper.compositionstart.bind(term.compositionHelper));\n  on(term.textarea, 'compositionupdate', term.compositionHelper.compositionupdate.bind(term.compositionHelper));\n  on(term.textarea, 'compositionend', term.compositionHelper.compositionend.bind(term.compositionHelper));\n  term.on('refresh', term.compositionHelper.updateCompositionElements.bind(term.compositionHelper));\n  term.on('refresh', function (data) {\n    term.queueLinkification(data.start, data.end)\n  });\n};\n\n\n/**\n * Insert the given row to the terminal or produce a new one\n * if no row argument is passed. Return the inserted row.\n * @param {HTMLElement} row (optional) The row to append to the terminal.\n */\nTerminal.prototype.insertRow = function (row) {\n  if (typeof row != 'object') {\n    row = document.createElement('div');\n  }\n\n  this.rowContainer.appendChild(row);\n  this.children.push(row);\n\n  return row;\n};\n\n/**\n * Opens the terminal within an element.\n *\n * @param {HTMLElement} parent The element to create the terminal within.\n */\nTerminal.prototype.open = function(parent) {\n  var self=this, i=0, div;\n\n  this.parent = parent || this.parent;\n\n  if (!this.parent) {\n    throw new Error('Terminal requires a parent element.');\n  }\n\n  // Grab global elements\n  this.context = this.parent.ownerDocument.defaultView;\n  this.document = this.parent.ownerDocument;\n  this.body = this.document.getElementsByTagName('body')[0];\n\n  //Create main element container\n  this.element = this.document.createElement('div');\n  this.element.classList.add('terminal');\n  this.element.classList.add('xterm');\n  this.element.classList.add('xterm-theme-' + this.theme);\n  this.setCursorBlinking(this.options.cursorBlink);\n\n  this.element.style.height\n  this.element.setAttribute('tabindex', 0);\n\n  this.viewportElement = document.createElement('div');\n  this.viewportElement.classList.add('xterm-viewport');\n  this.element.appendChild(this.viewportElement);\n  this.viewportScrollArea = document.createElement('div');\n  this.viewportScrollArea.classList.add('xterm-scroll-area');\n  this.viewportElement.appendChild(this.viewportScrollArea);\n\n  // Create the container that will hold the lines of the terminal and then\n  // produce the lines the lines.\n  this.rowContainer = document.createElement('div');\n  this.rowContainer.classList.add('xterm-rows');\n  this.element.appendChild(this.rowContainer);\n  this.children = [];\n  this.linkifier.attachToDom(document, this.children);\n\n  // Create the container that will hold helpers like the textarea for\n  // capturing DOM Events. Then produce the helpers.\n  this.helperContainer = document.createElement('div');\n  this.helperContainer.classList.add('xterm-helpers');\n  // TODO: This should probably be inserted once it's filled to prevent an additional layout\n  this.element.appendChild(this.helperContainer);\n  this.textarea = document.createElement('textarea');\n  this.textarea.classList.add('xterm-helper-textarea');\n  this.textarea.setAttribute('autocorrect', 'off');\n  this.textarea.setAttribute('autocapitalize', 'off');\n  this.textarea.setAttribute('spellcheck', 'false');\n  this.textarea.tabIndex = 0;\n  this.textarea.addEventListener('focus', function() {\n    self.emit('focus', {terminal: self});\n  });\n  this.textarea.addEventListener('blur', function() {\n    self.emit('blur', {terminal: self});\n  });\n  this.helperContainer.appendChild(this.textarea);\n\n  this.compositionView = document.createElement('div');\n  this.compositionView.classList.add('composition-view');\n  this.compositionHelper = new CompositionHelper(this.textarea, this.compositionView, this);\n  this.helperContainer.appendChild(this.compositionView);\n\n  this.charSizeStyleElement = document.createElement('style');\n  this.helperContainer.appendChild(this.charSizeStyleElement);\n\n  for (; i < this.rows; i++) {\n    this.insertRow();\n  }\n  this.parent.appendChild(this.element);\n\n  this.charMeasure = new CharMeasure(document, this.helperContainer);\n  this.charMeasure.on('charsizechanged', function () {\n    self.updateCharSizeCSS();\n  });\n  this.charMeasure.measure();\n\n  this.viewport = new Viewport(this, this.viewportElement, this.viewportScrollArea, this.charMeasure);\n  this.renderer = new Renderer(this);\n\n  // Setup loop that draws to screen\n  this.refresh(0, this.rows - 1);\n\n  // Initialize global actions that\n  // need to be taken on the document.\n  this.initGlobal();\n\n  // Ensure there is a Terminal.focus.\n  this.focus();\n\n  on(this.element, 'click', function() {\n    var selection = document.getSelection(),\n        collapsed = selection.isCollapsed,\n        isRange = typeof collapsed == 'boolean' ? !collapsed : selection.type == 'Range';\n    if (!isRange) {\n      self.focus();\n    }\n  });\n\n  // Listen for mouse events and translate\n  // them into terminal mouse protocols.\n  this.bindMouse();\n\n  /**\n   * This event is emitted when terminal has completed opening.\n   *\n   * @event open\n   */\n  this.emit('open');\n};\n\n\n/**\n * Attempts to load an add-on using CommonJS or RequireJS (whichever is available).\n * @param {string} addon The name of the addon to load\n * @static\n */\nTerminal.loadAddon = function(addon, callback) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    // CommonJS\n    return require('./addons/' + addon + '/' + addon);\n  } else if (typeof define == 'function') {\n    // RequireJS\n    return require(['./addons/' + addon + '/' + addon], callback);\n  } else {\n    console.error('Cannot load a module without a CommonJS or RequireJS environment.');\n    return false;\n  }\n};\n\n/**\n * Updates the helper CSS class with any changes necessary after the terminal's\n * character width has been changed.\n */\nTerminal.prototype.updateCharSizeCSS = function() {\n  this.charSizeStyleElement.textContent = '.xterm-wide-char{width:' + (this.charMeasure.width * 2) + 'px;}';\n}\n\n/**\n * XTerm mouse events\n * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\n * To better understand these\n * the xterm code is very helpful:\n * Relevant files:\n *   button.c, charproc.c, misc.c\n * Relevant functions in xterm/button.c:\n *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\n */\nTerminal.prototype.bindMouse = function() {\n  var el = this.element, self = this, pressed = 32;\n\n  // mouseup, mousedown, wheel\n  // left click: ^[[M 3<^[[M#3<\n  // wheel up: ^[[M`3>\n  function sendButton(ev) {\n    var button\n    , pos;\n\n    // get the xterm-style button\n    button = getButton(ev);\n\n    // get mouse coordinates\n    pos = getCoords(ev);\n    if (!pos) return;\n\n    sendEvent(button, pos);\n\n    switch (ev.overrideType || ev.type) {\n      case 'mousedown':\n        pressed = button;\n        break;\n      case 'mouseup':\n        // keep it at the left\n        // button, just in case.\n        pressed = 32;\n        break;\n      case 'wheel':\n        // nothing. don't\n        // interfere with\n        // `pressed`.\n        break;\n    }\n  }\n\n  // motion example of a left click:\n  // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\n  function sendMove(ev) {\n    var button = pressed\n    , pos;\n\n    pos = getCoords(ev);\n    if (!pos) return;\n\n    // buttons marked as motions\n    // are incremented by 32\n    button += 32;\n\n    sendEvent(button, pos);\n  }\n\n  // encode button and\n  // position to characters\n  function encode(data, ch) {\n    if (!self.utfMouse) {\n      if (ch === 255) return data.push(0);\n      if (ch > 127) ch = 127;\n      data.push(ch);\n    } else {\n      if (ch === 2047) return data.push(0);\n      if (ch < 127) {\n        data.push(ch);\n      } else {\n        if (ch > 2047) ch = 2047;\n        data.push(0xC0 | (ch >> 6));\n        data.push(0x80 | (ch & 0x3F));\n      }\n    }\n  }\n\n  // send a mouse event:\n  // regular/utf8: ^[[M Cb Cx Cy\n  // urxvt: ^[[ Cb ; Cx ; Cy M\n  // sgr: ^[[ Cb ; Cx ; Cy M/m\n  // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\n  // locator: CSI P e ; P b ; P r ; P c ; P p & w\n  function sendEvent(button, pos) {\n    // self.emit('mouse', {\n    //   x: pos.x - 32,\n    //   y: pos.x - 32,\n    //   button: button\n    // });\n\n    if (self.vt300Mouse) {\n      // NOTE: Unstable.\n      // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\n      button &= 3;\n      pos.x -= 32;\n      pos.y -= 32;\n      var data = C0.ESC + '[24';\n      if (button === 0) data += '1';\n      else if (button === 1) data += '3';\n      else if (button === 2) data += '5';\n      else if (button === 3) return;\n      else data += '0';\n      data += '~[' + pos.x + ',' + pos.y + ']\\r';\n      self.send(data);\n      return;\n    }\n\n    if (self.decLocator) {\n      // NOTE: Unstable.\n      button &= 3;\n      pos.x -= 32;\n      pos.y -= 32;\n      if (button === 0) button = 2;\n      else if (button === 1) button = 4;\n      else if (button === 2) button = 6;\n      else if (button === 3) button = 3;\n      self.send(C0.ESC + '['\n                + button\n                + ';'\n                + (button === 3 ? 4 : 0)\n                + ';'\n                + pos.y\n                + ';'\n                + pos.x\n                + ';'\n                + (pos.page || 0)\n                + '&w');\n      return;\n    }\n\n    if (self.urxvtMouse) {\n      pos.x -= 32;\n      pos.y -= 32;\n      pos.x++;\n      pos.y++;\n      self.send(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\n      return;\n    }\n\n    if (self.sgrMouse) {\n      pos.x -= 32;\n      pos.y -= 32;\n      self.send(C0.ESC + '[<'\n                + (((button & 3) === 3 ? button & ~3 : button) - 32)\n                + ';'\n                + pos.x\n                + ';'\n                + pos.y\n                + ((button & 3) === 3 ? 'm' : 'M'));\n      return;\n    }\n\n    var data = [];\n\n    encode(data, button);\n    encode(data, pos.x);\n    encode(data, pos.y);\n\n    self.send(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\n  }\n\n  function getButton(ev) {\n    var button\n    , shift\n    , meta\n    , ctrl\n    , mod;\n\n    // two low bits:\n    // 0 = left\n    // 1 = middle\n    // 2 = right\n    // 3 = release\n    // wheel up/down:\n    // 1, and 2 - with 64 added\n    switch (ev.overrideType || ev.type) {\n      case 'mousedown':\n        button = ev.button != null\n          ? +ev.button\n        : ev.which != null\n          ? ev.which - 1\n        : null;\n\n        if (self.browser.isMSIE) {\n          button = button === 1 ? 0 : button === 4 ? 1 : button;\n        }\n        break;\n      case 'mouseup':\n        button = 3;\n        break;\n      case 'DOMMouseScroll':\n        button = ev.detail < 0\n          ? 64\n        : 65;\n        break;\n      case 'wheel':\n        button = ev.wheelDeltaY > 0\n          ? 64\n        : 65;\n        break;\n    }\n\n    // next three bits are the modifiers:\n    // 4 = shift, 8 = meta, 16 = control\n    shift = ev.shiftKey ? 4 : 0;\n    meta = ev.metaKey ? 8 : 0;\n    ctrl = ev.ctrlKey ? 16 : 0;\n    mod = shift | meta | ctrl;\n\n    // no mods\n    if (self.vt200Mouse) {\n      // ctrl only\n      mod &= ctrl;\n    } else if (!self.normalMouse) {\n      mod = 0;\n    }\n\n    // increment to SP\n    button = (32 + (mod << 2)) + button;\n\n    return button;\n  }\n\n  // mouse coordinates measured in cols/rows\n  function getCoords(ev) {\n    var x, y, w, h, el;\n\n    // ignore browsers without pageX for now\n    if (ev.pageX == null) return;\n\n    x = ev.pageX;\n    y = ev.pageY;\n    el = self.element;\n\n    // should probably check offsetParent\n    // but this is more portable\n    while (el && el !== self.document.documentElement) {\n      x -= el.offsetLeft;\n      y -= el.offsetTop;\n      el = 'offsetParent' in el\n        ? el.offsetParent\n      : el.parentNode;\n    }\n\n    // convert to cols/rows\n    x = Math.ceil(x / self.charMeasure.width);\n    y = Math.ceil(y / self.charMeasure.height);\n\n    // be sure to avoid sending\n    // bad positions to the program\n    if (x < 0) x = 0;\n    if (x > self.cols) x = self.cols;\n    if (y < 0) y = 0;\n    if (y > self.rows) y = self.rows;\n\n    // xterm sends raw bytes and\n    // starts at 32 (SP) for each.\n    x += 32;\n    y += 32;\n\n    return {\n      x: x,\n      y: y,\n      type: 'wheel'\n    };\n  }\n\n  on(el, 'mousedown', function(ev) {\n    if (!self.mouseEvents) return;\n\n    // send the button\n    sendButton(ev);\n\n    // ensure focus\n    self.focus();\n\n    // fix for odd bug\n    //if (self.vt200Mouse && !self.normalMouse) {\n    if (self.vt200Mouse) {\n      ev.overrideType = 'mouseup';\n      sendButton(ev);\n      return self.cancel(ev);\n    }\n\n    // bind events\n    if (self.normalMouse) on(self.document, 'mousemove', sendMove);\n\n    // x10 compatibility mode can't send button releases\n    if (!self.x10Mouse) {\n      on(self.document, 'mouseup', function up(ev) {\n        sendButton(ev);\n        if (self.normalMouse) off(self.document, 'mousemove', sendMove);\n        off(self.document, 'mouseup', up);\n        return self.cancel(ev);\n      });\n    }\n\n    return self.cancel(ev);\n  });\n\n  //if (self.normalMouse) {\n  //  on(self.document, 'mousemove', sendMove);\n  //}\n\n  on(el, 'wheel', function(ev) {\n    if (!self.mouseEvents) return;\n    if (self.x10Mouse\n        || self.vt300Mouse\n        || self.decLocator) return;\n    sendButton(ev);\n    return self.cancel(ev);\n  });\n\n  // allow wheel scrolling in\n  // the shell for example\n  on(el, 'wheel', function(ev) {\n    if (self.mouseEvents) return;\n    self.viewport.onWheel(ev);\n    return self.cancel(ev);\n  });\n};\n\n/**\n * Destroys the terminal.\n */\nTerminal.prototype.destroy = function() {\n  this.readable = false;\n  this.writable = false;\n  this._events = {};\n  this.handler = function() {};\n  this.write = function() {};\n  if (this.element && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n  //this.emit('close');\n};\n\n/**\n * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n * opportunity.\n * @param {number} start The row to start from (between 0 and this.rows - 1).\n * @param {number} end The row to end at (between start and this.rows - 1).\n */\nTerminal.prototype.refresh = function(start, end) {\n  if (this.renderer) {\n    this.renderer.queueRefresh(start, end);\n  }\n};\n\n/**\n * Queues linkification for the specified rows.\n * @param {number} start The row to start from (between 0 and this.rows - 1).\n * @param {number} end The row to end at (between start and this.rows - 1).\n */\nTerminal.prototype.queueLinkification = function(start, end) {\n  if (this.linkifier) {\n    for (let i = start; i <= end; i++) {\n      this.linkifier.linkifyRow(i);\n    }\n  }\n}\n\n/**\n * Display the cursor element\n */\nTerminal.prototype.showCursor = function() {\n  if (!this.cursorState) {\n    this.cursorState = 1;\n    this.refresh(this.y, this.y);\n  }\n};\n\n/**\n * Scroll the terminal down 1 row, creating a blank line.\n */\nTerminal.prototype.scroll = function() {\n  var row;\n\n  // Make room for the new row in lines\n  if (this.lines.length === this.lines.maxLength) {\n    this.lines.trimStart(1);\n    this.ybase--;\n    if (this.ydisp !== 0) {\n      this.ydisp--;\n    }\n  }\n\n  this.ybase++;\n\n  // TODO: Why is this done twice?\n  if (!this.userScrolling) {\n    this.ydisp = this.ybase;\n  }\n\n  // last line\n  row = this.ybase + this.rows - 1;\n\n  // subtract the bottom scroll region\n  row -= this.rows - 1 - this.scrollBottom;\n\n  if (row === this.lines.length) {\n    // Optimization: pushing is faster than splicing when they amount to the same behavior\n    this.lines.push(this.blankLine());\n  } else {\n    // add our new line\n    this.lines.splice(row, 0, this.blankLine());\n  }\n\n  if (this.scrollTop !== 0) {\n    if (this.ybase !== 0) {\n      this.ybase--;\n      if (!this.userScrolling) {\n        this.ydisp = this.ybase;\n      }\n    }\n    this.lines.splice(this.ybase + this.scrollTop, 1);\n  }\n\n  // this.maxRange();\n  this.updateRange(this.scrollTop);\n  this.updateRange(this.scrollBottom);\n\n  /**\n   * This event is emitted whenever the terminal is scrolled.\n   * The one parameter passed is the new y display position.\n   *\n   * @event scroll\n   */\n  this.emit('scroll', this.ydisp);\n};\n\n/**\n * Scroll the display of the terminal\n * @param {number} disp The number of lines to scroll down (negatives scroll up).\n * @param {boolean} suppressScrollEvent Don't emit the scroll event as scrollDisp. This is used\n * to avoid unwanted events being handled by the veiwport when the event was triggered from the\n * viewport originally.\n */\nTerminal.prototype.scrollDisp = function(disp, suppressScrollEvent) {\n  if (disp < 0) {\n    this.userScrolling = true;\n  } else if (disp + this.ydisp >= this.ybase) {\n    this.userScrolling = false;\n  }\n\n  this.ydisp += disp;\n\n  if (this.ydisp > this.ybase) {\n    this.ydisp = this.ybase;\n  } else if (this.ydisp < 0) {\n    this.ydisp = 0;\n  }\n\n  if (!suppressScrollEvent) {\n    this.emit('scroll', this.ydisp);\n  }\n\n  this.refresh(0, this.rows - 1);\n};\n\n/**\n * Scroll the display of the terminal by a number of pages.\n * @param {number} pageCount The number of pages to scroll (negative scrolls up).\n */\nTerminal.prototype.scrollPages = function(pageCount) {\n  this.scrollDisp(pageCount * (this.rows - 1));\n}\n\n/**\n * Scrolls the display of the terminal to the top.\n */\nTerminal.prototype.scrollToTop = function() {\n  this.scrollDisp(-this.ydisp);\n}\n\n/**\n * Scrolls the display of the terminal to the bottom.\n */\nTerminal.prototype.scrollToBottom = function() {\n  this.scrollDisp(this.ybase - this.ydisp);\n}\n\n/**\n * Writes text to the terminal.\n * @param {string} text The text to write to the terminal.\n */\nTerminal.prototype.write = function(data) {\n  this.writeBuffer.push(data);\n\n  // Send XOFF to pause the pty process if the write buffer becomes too large so\n  // xterm.js can catch up before more data is sent. This is necessary in order\n  // to keep signals such as ^C responsive.\n  if (this.options.useFlowControl && !this.xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n    // XOFF - stop pty pipe\n    // XON will be triggered by emulator before processing data chunk\n    this.send(C0.DC3);\n    this.xoffSentToCatchUp = true;\n  }\n\n  if (!this.writeInProgress && this.writeBuffer.length > 0) {\n    // Kick off a write which will write all data in sequence recursively\n    this.writeInProgress = true;\n    // Kick off an async innerWrite so more writes can come in while processing data\n    var self = this;\n    setTimeout(function () {\n      self.innerWrite();\n    });\n  }\n}\n\nTerminal.prototype.innerWrite = function() {\n  var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\n  while (writeBatch.length > 0) {\n    var data = writeBatch.shift();\n    var l = data.length, i = 0, j, cs, ch, code, low, ch_width, row;\n\n    // If XOFF was sent in order to catch up with the pty process, resume it if\n    // the writeBuffer is empty to allow more data to come in.\n    if (this.xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\n      this.send(C0.DC1);\n      this.xoffSentToCatchUp = false;\n    }\n\n    this.refreshStart = this.y;\n    this.refreshEnd = this.y;\n\n    this.parser.parse(data);\n\n    this.updateRange(this.y);\n    this.refresh(this.refreshStart, this.refreshEnd);\n  }\n  if (this.writeBuffer.length > 0) {\n    // Allow renderer to catch up before processing the next batch\n    var self = this;\n    setTimeout(function () {\n      self.innerWrite();\n    }, 0);\n  } else {\n    this.writeInProgress = false;\n  }\n};\n\n/**\n * Writes text to the terminal, followed by a break line character (\\n).\n * @param {string} text The text to write to the terminal.\n */\nTerminal.prototype.writeln = function(data) {\n  this.write(data + '\\r\\n');\n};\n\n/**\n * Attaches a custom keydown handler which is run before keys are processed, giving consumers of\n * xterm.js ultimate control as to what keys should be processed by the terminal and what keys\n * should not.\n * @param {function} customKeydownHandler The custom KeyboardEvent handler to attach. This is a\n *   function that takes a KeyboardEvent, allowing consumers to stop propogation and/or prevent\n *   the default action. The function returns whether the event should be processed by xterm.js.\n */\nTerminal.prototype.attachCustomKeydownHandler = function(customKeydownHandler) {\n  this.customKeydownHandler = customKeydownHandler;\n}\n\n/**\n * Attaches a http(s) link handler, forcing web links to behave differently to\n * regular <a> tags. This will trigger a refresh as links potentially need to be\n * reconstructed. Calling this with null will remove the handler.\n * @param {LinkHandler} handler The handler callback function.\n */\nTerminal.prototype.setHypertextLinkHandler = function(handler) {\n  if (!this.linkifier) {\n    throw new Error('Cannot attach a hypertext link handler before Terminal.open is called');\n  }\n  this.linkifier.setHypertextLinkHandler(handler);\n  // Refresh to force links to refresh\n  this.refresh(0, this.rows - 1);\n}\n\n/**\n * Attaches a validation callback for hypertext links. This is useful to use\n * validation logic or to do something with the link's element and url.\n * @param {LinkMatcherValidationCallback} callback The callback to use, this can\n * be cleared with null.\n */\nTerminal.prototype.setHypertextValidationCallback = function(handler) {\n  if (!this.linkifier) {\n    throw new Error('Cannot attach a hypertext validation callback before Terminal.open is called');\n  }\n  this.linkifier.setHypertextValidationCallback(handler);\n  // Refresh to force links to refresh\n  this.refresh(0, this.rows - 1);\n}\n\n/**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param {RegExp} regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param {LinkHandler} handler The callback when the link is called.\n   * @param {LinkMatcherOptions} [options] Options for the link matcher.\n   * @return {number} The ID of the new matcher, this can be used to deregister.\n */\nTerminal.prototype.registerLinkMatcher = function(regex, handler, options) {\n  if (this.linkifier) {\n    var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n    this.refresh(0, this.rows - 1);\n    return matcherId;\n  }\n}\n\n/**\n * Deregisters a link matcher if it has been registered.\n * @param {number} matcherId The link matcher's ID (returned after register)\n */\nTerminal.prototype.deregisterLinkMatcher = function(matcherId) {\n  if (this.linkifier) {\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n}\n\n/**\n * Handle a keydown event\n * Key Resources:\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n * @param {KeyboardEvent} ev The keydown event to be handled.\n */\nTerminal.prototype.keyDown = function(ev) {\n  if (this.customKeydownHandler && this.customKeydownHandler(ev) === false) {\n    return false;\n  }\n\n  this.restartCursorBlinking();\n\n  if (!this.compositionHelper.keydown.bind(this.compositionHelper)(ev)) {\n    if (this.ybase !== this.ydisp) {\n      this.scrollToBottom();\n    }\n    return false;\n  }\n\n  var self = this;\n  var result = this.evaluateKeyEscapeSequence(ev);\n\n  if (result.key === C0.DC3) { // XOFF\n    this.writeStopped = true;\n  } else if (result.key === C0.DC1) { // XON\n    this.writeStopped = false;\n  }\n\n  if (result.scrollDisp) {\n    this.scrollDisp(result.scrollDisp);\n    return this.cancel(ev, true);\n  }\n\n  if (isThirdLevelShift(this, ev)) {\n    return true;\n  }\n\n  if (result.cancel) {\n    // The event is canceled at the end already, is this necessary?\n    this.cancel(ev, true);\n  }\n\n  if (!result.key) {\n    return true;\n  }\n\n  this.emit('keydown', ev);\n  this.emit('key', result.key, ev);\n  this.showCursor();\n  this.handler(result.key);\n\n  return this.cancel(ev, true);\n};\n\n/**\n * Returns an object that determines how a KeyboardEvent should be handled. The key of the\n * returned value is the new key code to pass to the PTY.\n *\n * Reference: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n * @param {KeyboardEvent} ev The keyboard event to be translated to key escape sequence.\n */\nTerminal.prototype.evaluateKeyEscapeSequence = function(ev) {\n  var result = {\n    // Whether to cancel event propogation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined,\n    // The number of characters to scroll, if this is defined it will cancel the event\n    scrollDisp: undefined\n  };\n  var modifiers = ev.shiftKey << 0 | ev.altKey << 1 | ev.ctrlKey << 2 | ev.metaKey << 3;\n  switch (ev.keyCode) {\n    case 8:\n      // backspace\n      if (ev.shiftKey) {\n        result.key = C0.BS; // ^H\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key == C0.ESC + '[1;3D') {\n          result.key = (this.browser.isMac) ? C0.ESC + 'b' : C0.ESC + '[1;5D';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key == C0.ESC + '[1;3C') {\n          result.key = (this.browser.isMac) ? C0.ESC + 'f' : C0.ESC + '[1;5C';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        if (result.key == C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        if (result.key == C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers)\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      else if (this.applicationCursor)\n        result.key = C0.ESC + 'OH';\n      else\n        result.key = C0.ESC + '[H';\n      break;\n    case 35:\n      // end\n      if (modifiers)\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      else if (this.applicationCursor)\n        result.key = C0.ESC + 'OF';\n      else\n        result.key = C0.ESC + '[F';\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.scrollDisp = -(this.rows - 1);\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.scrollDisp = this.rows - 1;\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          // NUL\n          result.key = String.fromCharCode(0);\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          // delete\n          result.key = String.fromCharCode(127);\n        } else if (ev.keyCode === 219) {\n          // ^[ - Control Sequence Introducer (CSI)\n          result.key = String.fromCharCode(27);\n        } else if (ev.keyCode === 220) {\n          // ^\\ - String Terminator (ST)\n          result.key = String.fromCharCode(28);\n        } else if (ev.keyCode === 221) {\n          // ^] - Operating System Command (OSC)\n          result.key = String.fromCharCode(29);\n        }\n      } else if (!this.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) {\n        // On Mac this is a third level shift. Use <Esc> instead.\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = C0.ESC + String.fromCharCode(ev.keyCode + 32);\n        } else if (ev.keyCode === 192) {\n          result.key = C0.ESC + '`';\n        } else if (ev.keyCode >= 48 && ev.keyCode <= 57) {\n          result.key = C0.ESC + (ev.keyCode - 48);\n        }\n      }\n      break;\n  }\n\n  return result;\n};\n\n/**\n * Set the G level of the terminal\n * @param g\n */\nTerminal.prototype.setgLevel = function(g) {\n  this.glevel = g;\n  this.charset = this.charsets[g];\n};\n\n/**\n * Set the charset for the given G level of the terminal\n * @param g\n * @param charset\n */\nTerminal.prototype.setgCharset = function(g, charset) {\n  this.charsets[g] = charset;\n  if (this.glevel === g) {\n    this.charset = charset;\n  }\n};\n\n/**\n * Handle a keypress event.\n * Key Resources:\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n * @param {KeyboardEvent} ev The keypress event to be handled.\n */\nTerminal.prototype.keyPress = function(ev) {\n  var key;\n\n  this.cancel(ev);\n\n  if (ev.charCode) {\n    key = ev.charCode;\n  } else if (ev.which == null) {\n    key = ev.keyCode;\n  } else if (ev.which !== 0 && ev.charCode !== 0) {\n    key = ev.which;\n  } else {\n    return false;\n  }\n\n  if (!key || (\n    (ev.altKey || ev.ctrlKey || ev.metaKey) && !isThirdLevelShift(this, ev)\n  )) {\n    return false;\n  }\n\n  key = String.fromCharCode(key);\n\n  this.emit('keypress', key, ev);\n  this.emit('key', key, ev);\n  this.showCursor();\n  this.handler(key);\n\n  return false;\n};\n\n/**\n * Send data for handling to the terminal\n * @param {string} data\n */\nTerminal.prototype.send = function(data) {\n  var self = this;\n\n  if (!this.queue) {\n    setTimeout(function() {\n      self.handler(self.queue);\n      self.queue = '';\n    }, 1);\n  }\n\n  this.queue += data;\n};\n\n/**\n * Ring the bell.\n * Note: We could do sweet things with webaudio here\n */\nTerminal.prototype.bell = function() {\n  if (!this.visualBell) return;\n  var self = this;\n  this.element.style.borderColor = 'white';\n  setTimeout(function() {\n    self.element.style.borderColor = '';\n  }, 10);\n  if (this.popOnBell) this.focus();\n};\n\n/**\n * Log the current state to the console.\n */\nTerminal.prototype.log = function() {\n  if (!this.debug) return;\n  if (!this.context.console || !this.context.console.log) return;\n  var args = Array.prototype.slice.call(arguments);\n  this.context.console.log.apply(this.context.console, args);\n};\n\n/**\n * Log the current state as error to the console.\n */\nTerminal.prototype.error = function() {\n  if (!this.debug) return;\n  if (!this.context.console || !this.context.console.error) return;\n  var args = Array.prototype.slice.call(arguments);\n  this.context.console.error.apply(this.context.console, args);\n};\n\n/**\n * Resizes the terminal.\n *\n * @param {number} x The number of columns to resize to.\n * @param {number} y The number of rows to resize to.\n */\nTerminal.prototype.resize = function(x, y) {\n  if (isNaN(x) || isNaN(y)) {\n    return;\n  }\n\n  var line\n  , el\n  , i\n  , j\n  , ch\n  , addToY;\n\n  if (x === this.cols && y === this.rows) {\n    return;\n  }\n\n  if (x < 1) x = 1;\n  if (y < 1) y = 1;\n\n  // resize cols\n  j = this.cols;\n  if (j < x) {\n    ch = [this.defAttr, ' ', 1]; // does xterm use the default attr?\n    i = this.lines.length;\n    while (i--) {\n      while (this.lines.get(i).length < x) {\n        this.lines.get(i).push(ch);\n      }\n    }\n  }\n\n  this.cols = x;\n  this.setupStops(this.cols);\n\n  // resize rows\n  j = this.rows;\n  addToY = 0;\n  if (j < y) {\n    el = this.element;\n    while (j++ < y) {\n      // y is rows, not this.y\n      if (this.lines.length < y + this.ybase) {\n        if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n          // There is room above the buffer and there are no empty elements below the line,\n          // scroll up\n          this.ybase--;\n          addToY++\n          if (this.ydisp > 0) {\n            // Viewport is at the top of the buffer, must increase downwards\n            this.ydisp--;\n          }\n        } else {\n          // Add a blank line if there is no buffer left at the top to scroll to, or if there\n          // are blank lines after the cursor\n          this.lines.push(this.blankLine());\n        }\n      }\n      if (this.children.length < y) {\n        this.insertRow();\n      }\n    }\n  } else { // (j > y)\n    while (j-- > y) {\n      if (this.lines.length > y + this.ybase) {\n        if (this.lines.length > this.ybase + this.y + 1) {\n          // The line is a blank line below the cursor, remove it\n          this.lines.pop();\n        } else {\n          // The line is the cursor, scroll down\n          this.ybase++;\n          this.ydisp++;\n        }\n      }\n      if (this.children.length > y) {\n        el = this.children.shift();\n        if (!el) continue;\n        el.parentNode.removeChild(el);\n      }\n    }\n  }\n  this.rows = y;\n\n  // Make sure that the cursor stays on screen\n  if (this.y >= y) {\n    this.y = y - 1;\n  }\n  if (addToY) {\n    this.y += addToY;\n  }\n\n  if (this.x >= x) {\n    this.x = x - 1;\n  }\n\n  this.scrollTop = 0;\n  this.scrollBottom = y - 1;\n\n  this.charMeasure.measure();\n\n  this.refresh(0, this.rows - 1);\n\n  this.normal = null;\n\n  this.geometry = [this.cols, this.rows];\n  this.emit('resize', {terminal: this, cols: x, rows: y});\n};\n\n/**\n * Updates the range of rows to refresh\n * @param {number} y The number of rows to refresh next.\n */\nTerminal.prototype.updateRange = function(y) {\n  if (y < this.refreshStart) this.refreshStart = y;\n  if (y > this.refreshEnd) this.refreshEnd = y;\n  // if (y > this.refreshEnd) {\n  //   this.refreshEnd = y;\n  //   if (y > this.rows - 1) {\n  //     this.refreshEnd = this.rows - 1;\n  //   }\n  // }\n};\n\n/**\n * Set the range of refreshing to the maximum value\n */\nTerminal.prototype.maxRange = function() {\n  this.refreshStart = 0;\n  this.refreshEnd = this.rows - 1;\n};\n\n\n\n/**\n * Setup the tab stops.\n * @param {number} i\n */\nTerminal.prototype.setupStops = function(i) {\n  if (i != null) {\n    if (!this.tabs[i]) {\n      i = this.prevStop(i);\n    }\n  } else {\n    this.tabs = {};\n    i = 0;\n  }\n\n  for (; i < this.cols; i += this.getOption('tabStopWidth')) {\n    this.tabs[i] = true;\n  }\n};\n\n\n/**\n * Move the cursor to the previous tab stop from the given position (default is current).\n * @param {number} x The position to move the cursor to the previous tab stop.\n */\nTerminal.prototype.prevStop = function(x) {\n  if (x == null) x = this.x;\n  while (!this.tabs[--x] && x > 0);\n  return x >= this.cols\n    ? this.cols - 1\n  : x < 0 ? 0 : x;\n};\n\n\n/**\n * Move the cursor one tab stop forward from the given position (default is current).\n * @param {number} x The position to move the cursor one tab stop forward.\n */\nTerminal.prototype.nextStop = function(x) {\n  if (x == null) x = this.x;\n  while (!this.tabs[++x] && x < this.cols);\n  return x >= this.cols\n    ? this.cols - 1\n  : x < 0 ? 0 : x;\n};\n\n\n/**\n * Erase in the identified line everything from \"x\" to the end of the line (right).\n * @param {number} x The column from which to start erasing to the end of the line.\n * @param {number} y The line in which to operate.\n */\nTerminal.prototype.eraseRight = function(x, y) {\n  var line = this.lines.get(this.ybase + y);\n  if (!line) {\n    return;\n  }\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\n  for (; x < this.cols; x++) {\n    line[x] = ch;\n  }\n  this.updateRange(y);\n};\n\n\n\n/**\n * Erase in the identified line everything from \"x\" to the start of the line (left).\n * @param {number} x The column from which to start erasing to the start of the line.\n * @param {number} y The line in which to operate.\n */\nTerminal.prototype.eraseLeft = function(x, y) {\n  var line = this.lines.get(this.ybase + y);\n  if (!line) {\n    return;\n  }\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\n  x++;\n  while (x--) {\n    line[x] = ch;\n  }\n  this.updateRange(y);\n};\n\n/**\n * Clears the entire buffer, making the prompt line the new first line.\n */\nTerminal.prototype.clear = function() {\n  if (this.ybase === 0 && this.y === 0) {\n    // Don't clear if it's already clear\n    return;\n  }\n  this.lines.set(0, this.lines.get(this.ybase + this.y));\n  this.lines.length = 1;\n  this.ydisp = 0;\n  this.ybase = 0;\n  this.y = 0;\n  for (var i = 1; i < this.rows; i++) {\n    this.lines.push(this.blankLine());\n  }\n  this.refresh(0, this.rows - 1);\n  this.emit('scroll', this.ydisp);\n};\n\n/**\n * Erase all content in the given line\n * @param {number} y The line to erase all of its contents.\n */\nTerminal.prototype.eraseLine = function(y) {\n  this.eraseRight(0, y);\n};\n\n\n/**\n * Return the data array of a blank line\n * @param {number} cur First bunch of data for each \"blank\" character.\n */\nTerminal.prototype.blankLine = function(cur) {\n  var attr = cur\n  ? this.eraseAttr()\n  : this.defAttr;\n\n  var ch = [attr, ' ', 1]  // width defaults to 1 halfwidth character\n  , line = []\n  , i = 0;\n\n  for (; i < this.cols; i++) {\n    line[i] = ch;\n  }\n\n  return line;\n};\n\n\n/**\n * If cur return the back color xterm feature attribute. Else return defAttr.\n * @param {object} cur\n */\nTerminal.prototype.ch = function(cur) {\n  return cur\n    ? [this.eraseAttr(), ' ', 1]\n  : [this.defAttr, ' ', 1];\n};\n\n\n/**\n * Evaluate if the current erminal is the given argument.\n * @param {object} term The terminal to evaluate\n */\nTerminal.prototype.is = function(term) {\n  var name = this.termName;\n  return (name + '').indexOf(term) === 0;\n};\n\n\n/**\n * Emit the 'data' event and populate the given data.\n * @param {string} data The data to populate in the event.\n */\nTerminal.prototype.handler = function(data) {\n  // Prevents all events to pty process if stdin is disabled\n  if (this.options.disableStdin) {\n    return;\n  }\n\n  // Input is being sent to the terminal, the terminal should focus the prompt.\n  if (this.ybase !== this.ydisp) {\n    this.scrollToBottom();\n  }\n  this.emit('data', data);\n};\n\n\n/**\n * Emit the 'title' event and populate the given title.\n * @param {string} title The title to populate in the event.\n */\nTerminal.prototype.handleTitle = function(title) {\n  /**\n   * This event is emitted when the title of the terminal is changed\n   * from inside the terminal. The parameter is the new title.\n   *\n   * @event title\n   */\n  this.emit('title', title);\n};\n\n\n/**\n * ESC\n */\n\n/**\n * ESC D Index (IND is 0x84).\n */\nTerminal.prototype.index = function() {\n  this.y++;\n  if (this.y > this.scrollBottom) {\n    this.y--;\n    this.scroll();\n  }\n  // If the end of the line is hit, prevent this action from wrapping around to the next line.\n  if (this.x >= this.cols) {\n    this.x--;\n  }\n};\n\n\n/**\n * ESC M Reverse Index (RI is 0x8d).\n *\n * Move the cursor up one row, inserting a new blank line if necessary.\n */\nTerminal.prototype.reverseIndex = function() {\n  var j;\n  if (this.y === this.scrollTop) {\n    // possibly move the code below to term.reverseScroll();\n    // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n    // blankLine(true) is xterm/linux behavior\n    this.lines.shiftElements(this.y + this.ybase, this.rows - 1, 1);\n    this.lines.set(this.y + this.ybase, this.blankLine(true));\n    this.updateRange(this.scrollTop);\n    this.updateRange(this.scrollBottom);\n  } else {\n    this.y--;\n  }\n};\n\n\n/**\n * ESC c Full Reset (RIS).\n */\nTerminal.prototype.reset = function() {\n  this.options.rows = this.rows;\n  this.options.cols = this.cols;\n  var customKeydownHandler = this.customKeydownHandler;\n  Terminal.call(this, this.options);\n  this.customKeydownHandler = customKeydownHandler;\n  this.refresh(0, this.rows - 1);\n  this.viewport.syncScrollArea();\n};\n\n\n/**\n * ESC H Tab Set (HTS is 0x88).\n */\nTerminal.prototype.tabSet = function() {\n  this.tabs[this.x] = true;\n};\n\n/**\n * Helpers\n */\n\nfunction on(el, type, handler, capture) {\n  if (!Array.isArray(el)) {\n    el = [el];\n  }\n  el.forEach(function (element) {\n    element.addEventListener(type, handler, capture || false);\n  });\n}\n\nfunction off(el, type, handler, capture) {\n  el.removeEventListener(type, handler, capture || false);\n}\n\nfunction cancel(ev, force) {\n  if (!this.cancelEvents && !force) {\n    return;\n  }\n  ev.preventDefault();\n  ev.stopPropagation();\n  return false;\n}\n\nfunction inherits(child, parent) {\n  function f() {\n    this.constructor = child;\n  }\n  f.prototype = parent.prototype;\n  child.prototype = new f;\n}\n\nfunction indexOf(obj, el) {\n  var i = obj.length;\n  while (i--) {\n    if (obj[i] === el) return i;\n  }\n  return -1;\n}\n\nfunction isThirdLevelShift(term, ev) {\n  var thirdLevelKey =\n      (term.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (term.browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\n\n  if (ev.type == 'keypress') {\n    return thirdLevelKey;\n  }\n\n  // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n  return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n}\n\n// Expose to InputHandler (temporary)\nTerminal.prototype.matchColor = matchColor;\n\nfunction matchColor(r1, g1, b1) {\n  var hash = (r1 << 16) | (g1 << 8) | b1;\n\n  if (matchColor._cache[hash] != null) {\n    return matchColor._cache[hash];\n  }\n\n  var ldiff = Infinity\n  , li = -1\n  , i = 0\n  , c\n  , r2\n  , g2\n  , b2\n  , diff;\n\n  for (; i < Terminal.vcolors.length; i++) {\n    c = Terminal.vcolors[i];\n    r2 = c[0];\n    g2 = c[1];\n    b2 = c[2];\n\n    diff = matchColor.distance(r1, g1, b1, r2, g2, b2);\n\n    if (diff === 0) {\n      li = i;\n      break;\n    }\n\n    if (diff < ldiff) {\n      ldiff = diff;\n      li = i;\n    }\n  }\n\n  return matchColor._cache[hash] = li;\n}\n\nmatchColor._cache = {};\n\n// http://stackoverflow.com/questions/1633828\nmatchColor.distance = function(r1, g1, b1, r2, g2, b2) {\n  return Math.pow(30 * (r1 - r2), 2)\n    + Math.pow(59 * (g1 - g2), 2)\n    + Math.pow(11 * (b1 - b2), 2);\n};\n\nfunction each(obj, iter, con) {\n  if (obj.forEach) return obj.forEach(iter, con);\n  for (var i = 0; i < obj.length; i++) {\n    iter.call(con, obj[i], i, obj);\n  }\n}\n\nfunction wasMondifierKeyOnlyEvent(ev) {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n\nfunction keys(obj) {\n  if (Object.keys) return Object.keys(obj);\n  var key, keys = [];\n  for (key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/**\n * Expose\n */\n\nTerminal.EventEmitter = EventEmitter;\nTerminal.inherits = inherits;\n\n/**\n * Adds an event listener to the terminal.\n *\n * @param {string} event The name of the event. TODO: Document all event types\n * @param {function} callback The function to call when the event is triggered.\n */\nTerminal.on = on;\nTerminal.off = off;\nTerminal.cancel = cancel;\n\nmodule.exports = Terminal;\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/addons/attach/attach.js":"/**\n * Implements the attach method, that attaches the terminal to a WebSocket stream.\n * @module xterm/addons/attach/attach\n * @license MIT\n */\n\n(function (attach) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    /*\n     * CommonJS environment\n     */\n    module.exports = attach(require('../../xterm'));\n  } else if (typeof define == 'function') {\n    /*\n     * Require.js is available\n     */\n    define(['../../xterm'], attach);\n  } else {\n    /*\n     * Plain browser environment\n     */\n    attach(window.Terminal);\n  }\n})(function (Xterm) {\n  'use strict';\n\n  var exports = {};\n\n  /**\n   * Attaches the given terminal to the given socket.\n   *\n   * @param {Xterm} term - The terminal to be attached to the given socket.\n   * @param {WebSocket} socket - The socket to attach the current terminal.\n   * @param {boolean} bidirectional - Whether the terminal should send data\n   *                                  to the socket as well.\n   * @param {boolean} buffered - Whether the rendering of incoming data\n   *                             should happen instantly or at a maximum\n   *                             frequency of 1 rendering per 10ms.\n   */\n  exports.attach = function (term, socket, bidirectional, buffered) {\n    bidirectional = (typeof bidirectional == 'undefined') ? true : bidirectional;\n    term.socket = socket;\n\n    term._flushBuffer = function () {\n      term.write(term._attachSocketBuffer);\n      term._attachSocketBuffer = null;\n      clearTimeout(term._attachSocketBufferTimer);\n      term._attachSocketBufferTimer = null;\n    };\n\n    term._pushToBuffer = function (data) {\n      if (term._attachSocketBuffer) {\n        term._attachSocketBuffer += data;\n      } else {\n        term._attachSocketBuffer = data;\n        setTimeout(term._flushBuffer, 10);\n      }\n    };\n\n    term._getMessage = function (ev) {\n      if (buffered) {\n        term._pushToBuffer(ev.data);\n      } else {\n        term.write(ev.data);\n      }\n    };\n\n    term._sendData = function (data) {\n      socket.send(data);\n    };\n\n    socket.addEventListener('message', term._getMessage);\n\n    if (bidirectional) {\n      term.on('data', term._sendData);\n    }\n\n    socket.addEventListener('close', term.detach.bind(term, socket));\n    socket.addEventListener('error', term.detach.bind(term, socket));\n  };\n\n  /**\n   * Detaches the given terminal from the given socket\n   *\n   * @param {Xterm} term - The terminal to be detached from the given socket.\n   * @param {WebSocket} socket - The socket from which to detach the current\n   *                             terminal.\n   */\n  exports.detach = function (term, socket) {\n    term.off('data', term._sendData);\n\n    socket = (typeof socket == 'undefined') ? term.socket : socket;\n\n    if (socket) {\n      socket.removeEventListener('message', term._getMessage);\n    }\n\n    delete term.socket;\n  };\n\n  /**\n   * Attaches the current terminal to the given socket\n   *\n   * @param {WebSocket} socket - The socket to attach the current terminal.\n   * @param {boolean} bidirectional - Whether the terminal should send data\n   *                                  to the socket as well.\n   * @param {boolean} buffered - Whether the rendering of incoming data\n   *                             should happen instantly or at a maximum\n   *                             frequency of 1 rendering per 10ms.\n   */\n  Xterm.prototype.attach = function (socket, bidirectional, buffered) {\n    return exports.attach(this, socket, bidirectional, buffered);\n  };\n\n  /**\n   * Detaches the current terminal from the given socket.\n   *\n   * @param {WebSocket} socket - The socket from which to detach the current\n   *                             terminal.\n   */\n  Xterm.prototype.detach = function (socket) {\n    return exports.detach(this, socket);\n  };\n\n  return exports;\n});\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/addons/fit/fit.js":"/**\n * Fit terminal columns and rows to the dimensions of its DOM element.\n *\n * ## Approach\n * - Rows: Truncate the division of the terminal parent element height by the terminal row height.\n *\n * - Columns: Truncate the division of the terminal parent element width by the terminal character\n * width (apply display: inline at the terminal row and truncate its width with the current\n * number of columns).\n * @module xterm/addons/fit/fit\n * @license MIT\n */\n\n(function (fit) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    /*\n     * CommonJS environment\n     */\n    module.exports = fit(require('../../xterm'));\n  } else if (typeof define == 'function') {\n    /*\n     * Require.js is available\n     */\n    define(['../../xterm'], fit);\n  } else {\n    /*\n     * Plain browser environment\n     */\n    fit(window.Terminal);\n  }\n})(function (Xterm) {\n  var exports = {};\n\n  exports.proposeGeometry = function (term) {\n    if (!term.element.parentElement) {\n      return null;\n    }\n    var parentElementStyle = window.getComputedStyle(term.element.parentElement),\n        parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height')),\n        parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')) - 17),\n        elementStyle = window.getComputedStyle(term.element),\n        elementPaddingVer = parseInt(elementStyle.getPropertyValue('padding-top')) + parseInt(elementStyle.getPropertyValue('padding-bottom')),\n        elementPaddingHor = parseInt(elementStyle.getPropertyValue('padding-right')) + parseInt(elementStyle.getPropertyValue('padding-left')),\n        availableHeight = parentElementHeight - elementPaddingVer,\n        availableWidth = parentElementWidth - elementPaddingHor,\n        container = term.rowContainer,\n        subjectRow = term.rowContainer.firstElementChild,\n        contentBuffer = subjectRow.innerHTML,\n        characterHeight,\n        rows,\n        characterWidth,\n        cols,\n        geometry;\n\n    subjectRow.style.display = 'inline';\n    subjectRow.innerHTML = 'W'; // Common character for measuring width, although on monospace\n    characterWidth = subjectRow.getBoundingClientRect().width;\n    subjectRow.style.display = ''; // Revert style before calculating height, since they differ.\n    characterHeight = subjectRow.getBoundingClientRect().height;\n    subjectRow.innerHTML = contentBuffer;\n\n    rows = parseInt(availableHeight / characterHeight);\n    cols = parseInt(availableWidth / characterWidth);\n\n    geometry = {cols: cols, rows: rows};\n    return geometry;\n  };\n\n  exports.fit = function (term) {\n    var geometry = exports.proposeGeometry(term);\n\n    if (geometry) {\n      term.resize(geometry.cols, geometry.rows);\n    }\n  };\n\n  Xterm.prototype.proposeGeometry = function () {\n    return exports.proposeGeometry(this);\n  };\n\n  Xterm.prototype.fit = function () {\n    return exports.fit(this);\n  };\n\n  return exports;\n});\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/addons/fullscreen/fullscreen.js":"/**\n * Fullscreen addon for xterm.js\n * @module xterm/addons/fullscreen/fullscreen\n * @license MIT\n */\n(function (fullscreen) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    /*\n     * CommonJS environment\n     */\n    module.exports = fullscreen(require('../../xterm'));\n  } else if (typeof define == 'function') {\n    /*\n     * Require.js is available\n     */\n    define(['../../xterm'], fullscreen);\n  } else {\n    /*\n     * Plain browser environment\n     */\n    fullscreen(window.Terminal);\n  }\n})(function (Xterm) {\n  var exports = {};\n\n  /**\n   * Toggle the given terminal's fullscreen mode.\n   * @param {Xterm} term - The terminal to toggle full screen mode\n   * @param {boolean} fullscreen - Toggle fullscreen on (true) or off (false)\n   */\n  exports.toggleFullScreen = function (term, fullscreen) {\n    var fn;\n\n    if (typeof fullscreen == 'undefined') {\n      fn = (term.element.classList.contains('fullscreen')) ? 'remove' : 'add';\n    } else if (!fullscreen) {\n      fn = 'remove';\n    } else {\n      fn = 'add';\n    }\n\n    term.element.classList[fn]('fullscreen');\n  };\n\n  Xterm.prototype.toggleFullscreen = function (fullscreen) {\n    exports.toggleFullScreen(this, fullscreen);\n  };\n\n  return exports;\n});\n","/home/travis/build/npmtest/node-npmtest-xterm/node_modules/xterm/lib/addons/terminado/terminado.js":"/**\n * This module provides methods for attaching a terminal to a terminado WebSocket stream.\n *\n * @module xterm/addons/terminado/terminado\n * @license MIT\n */\n\n(function (attach) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    /*\n     * CommonJS environment\n     */\n    module.exports = attach(require('../../xterm'));\n  } else if (typeof define == 'function') {\n    /*\n     * Require.js is available\n     */\n    define(['../../xterm'], attach);\n  } else {\n    /*\n     * Plain browser environment\n     */\n    attach(window.Terminal);\n  }\n})(function (Xterm) {\n  'use strict';\n\n  var exports = {};\n\n  /**\n   * Attaches the given terminal to the given socket.\n   *\n   * @param {Xterm} term - The terminal to be attached to the given socket.\n   * @param {WebSocket} socket - The socket to attach the current terminal.\n   * @param {boolean} bidirectional - Whether the terminal should send data\n   *                                  to the socket as well.\n   * @param {boolean} buffered - Whether the rendering of incoming data\n   *                             should happen instantly or at a maximum\n   *                             frequency of 1 rendering per 10ms.\n   */\n  exports.terminadoAttach = function (term, socket, bidirectional, buffered) {\n    bidirectional = (typeof bidirectional == 'undefined') ? true : bidirectional;\n    term.socket = socket;\n\n    term._flushBuffer = function () {\n      term.write(term._attachSocketBuffer);\n      term._attachSocketBuffer = null;\n      clearTimeout(term._attachSocketBufferTimer);\n      term._attachSocketBufferTimer = null;\n    };\n\n    term._pushToBuffer = function (data) {\n      if (term._attachSocketBuffer) {\n        term._attachSocketBuffer += data;\n      } else {\n        term._attachSocketBuffer = data;\n        setTimeout(term._flushBuffer, 10);\n      }\n    };\n\n    term._getMessage = function (ev) {\n      var data = JSON.parse(ev.data)\n      if( data[0] == \"stdout\" ) {\n        if (buffered) {\n          term._pushToBuffer(data[1]);\n        } else {\n          term.write(data[1]);\n        }\n      }\n    };\n\n    term._sendData = function (data) {\n      socket.send(JSON.stringify(['stdin', data]));\n    };\n\n    term._setSize = function (size) {\n      socket.send(JSON.stringify(['set_size', size.rows, size.cols]));\n    };\n\n    socket.addEventListener('message', term._getMessage);\n\n    if (bidirectional) {\n      term.on('data', term._sendData);\n    }\n    term.on('resize', term._setSize);\n\n    socket.addEventListener('close', term.terminadoDetach.bind(term, socket));\n    socket.addEventListener('error', term.terminadoDetach.bind(term, socket));\n  };\n\n  /**\n   * Detaches the given terminal from the given socket\n   *\n   * @param {Xterm} term - The terminal to be detached from the given socket.\n   * @param {WebSocket} socket - The socket from which to detach the current\n   *                             terminal.\n   */\n  exports.terminadoDetach = function (term, socket) {\n    term.off('data', term._sendData);\n\n    socket = (typeof socket == 'undefined') ? term.socket : socket;\n\n    if (socket) {\n      socket.removeEventListener('message', term._getMessage);\n    }\n\n    delete term.socket;\n  };\n\n  /**\n   * Attaches the current terminal to the given socket\n   *\n   * @param {WebSocket} socket - The socket to attach the current terminal.\n   * @param {boolean} bidirectional - Whether the terminal should send data\n   *                                  to the socket as well.\n   * @param {boolean} buffered - Whether the rendering of incoming data\n   *                             should happen instantly or at a maximum\n   *                             frequency of 1 rendering per 10ms.\n   */\n  Xterm.prototype.terminadoAttach = function (socket, bidirectional, buffered) {\n    return exports.terminadoAttach(this, socket, bidirectional, buffered);\n  };\n\n  /**\n   * Detaches the current terminal from the given socket.\n   *\n   * @param {WebSocket} socket - The socket from which to detach the current\n   *                             terminal.\n   */\n  Xterm.prototype.terminadoDetach = function (socket) {\n    return exports.terminadoDetach(this, socket);\n  };\n\n  return exports;\n});\n"}